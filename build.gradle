plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'com.gorylenko.gradle-git-properties' version '2.0.0' apply false
    id 'io.spring.dependency-management' version '1.0.6.RELEASE' apply false
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'net.researchgate.release' version '2.8.0'
}

ext {
    // Project constants
    github_org = 'Discord4J'
    project_name = 'Discord4J'
    artifact_group = 'com.discord4j'
    project_version = "$version"
    project_description = 'Java interface for the Discord API'
    project_url = 'https://discord4j.com'
    project_jdk = '1.8'

    // Dependencies
    reactor_bom_version = 'Californium-SR5'
    jackson_version = '2.9.8'
    junit_version = '4.12'
    mockito_version = '2.24.0'
    logback_version = '1.3.0-alpha4'
    jdkstores_version = "$storesVersion"

    isJitpack = "true" == System.getenv("JITPACK")
    isRelease = !version.toString().endsWith('-SNAPSHOT')
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'maven-publish'
    if (!isJitpack && isRelease) {
        apply plugin: 'signing'
    }

    group = artifact_group
    version = project_version
    description = project_description

    sourceCompatibility = project_jdk
    targetCompatibility = project_jdk

    dependencyManagement {
        imports {
            mavenBom "io.projectreactor:reactor-bom:$reactor_bom_version"
        }
    }

    repositories {
        jcenter()
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(Javadoc) {
        options {
            encoding = 'UTF-8'
            tags = ["apiNote:a:API Note:",
                    "implSpec:a:Implementation Requirements:",
                    "implNote:a:Implementation Note:"]
            addStringOption 'encoding', 'UTF-8'
            // adding links to javadocs for filling specific classes when not existing inside current javadoc
            links = [
                    "https://docs.oracle.com/javase/8/docs/api/",
                    "https://docs.oracle.com/javaee/7/api/",
                    "http://fasterxml.github.io/jackson-databind/javadoc/2.9/",
                    "http://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/",
                    "http://projectreactor.io/docs/core/milestone/api/",
                    "http://projectreactor.io/docs/netty/milestone/api/",
                    "http://projectreactor.io/docs/extra/milestone/api/",
                    "http://netty.io/4.1/api/"
            ]
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.incremental = true
    }

    task downloadDependencies() {
        description 'Download all dependencies to the Gradle cache'
        doLast {
            configurations.findAll { it.canBeResolved }.files
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

    if (!isJitpack && isRelease) {
        signing {
            sign configurations.archives
        }
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'

    archivesBaseName = "discord4j-$project.name"

    tasks.withType(Javadoc) {
        title = "$archivesBaseName ${version} API"
        options.windowTitle = "$archivesBaseName ($version)"
    }

    publishing {
        publications {
            maven(MavenPublication) {
                customizePom(pom)

                from components.java
                artifactId archivesBaseName

                artifact sourcesJar
                artifact javadocJar

                if (!isJitpack && isRelease) {
                    pom.withXml {
                        def pomFile = file("${project.buildDir}/generated-pom.xml")
                        writeTo(pomFile)
                        def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                        artifact(pomAscFile) {
                            classifier = null
                            extension = 'pom.asc'
                        }
                    }

                    project.tasks.signArchives.signatureFiles.each {
                        artifact(it) {
                            def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                            if (matcher.find()) {
                                classifier = matcher.group(1)
                            } else {
                                classifier = null
                            }
                            extension = 'jar.asc'
                        }
                    }
                }
            }
        }

        if (!isJitpack) {
            repositories {
                maven {
                    if (isRelease) {
                        url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                    } else {
                        url 'https://oss.sonatype.org/content/repositories/snapshots/'
                    }
                    if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
                        credentials {
                            username project.property('sonatypeUsername')
                            password project.property('sonatypePassword')
                        }
                    }
                }
            }
        }
    }

    if (!isJitpack && isRelease) {
        model {
            tasks.generatePomFileForMavenPublication {
                destination = file("$buildDir/generated-pom.xml")
            }
            tasks.publishMavenPublicationToMavenLocal {
                dependsOn project.tasks.signArchives
            }
            tasks.publishMavenPublicationToMavenRepository {
                dependsOn project.tasks.signArchives
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'A JVM-based REST/WS wrapper for the official Discord Bot API'
            name 'Discord4J'
            url 'https://github.com/Discord4J/Discord4J'
            organization {
                name 'Discord4J'
                url 'https://discord4j.com'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/Discord4J/Discord4J/issues'
            }
            licenses {
                license {
                    name 'LGPL-3.0'
                    url 'https://github.com/Discord4J/Discord4J/LICENSE.txt'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/Discord4J/Discord4J'
                connection 'scm:git:git://github.com/Discord4J/Discord4J.git'
                developerConnection 'scm:git:ssh://git@github.com:Discord4J/Discord4J.git'
            }
            developers {
                developer {
                    name 'The Discord4J Team'
                }
            }
        }
    }
}

task aggregateJavadoc(type: Javadoc,
        description: "Generate javadocs from all child projects as if it was a single project",
        group: JavaBasePlugin.DOCUMENTATION_GROUP
) {
    destinationDir file("${rootProject.buildDir}/docs/aggregateJavadoc")
    failOnError false
    title = "$project_name ${project_version} API"

    options {
        windowTitle = "$project_name $project_version"
        addStringOption "Xdoclint:none", "-quiet"
        author true
    }

    subprojects.each { project ->
        project.tasks.withType(Javadoc.class).each { doc ->
            source += doc.source
            classpath += doc.classpath
            excludes += doc.excludes
            includes += doc.includes
        }
    }
}

task aggregateJavadocJar(type: Jar, dependsOn: aggregateJavadoc) {
    classifier = 'javadoc'
    from aggregateJavadoc.destinationDir
}

if (isJitpack) {
    publishing {
        publications {
            maven(MavenPublication) {
                artifact aggregateJavadocJar
            }
        }
    }
}

release {
    preTagCommitMessage = 'Release version'
    tagCommitMessage = 'Release version'
    newVersionCommitMessage = 'Next development version'
    git {
        requireBranch = ''
    }
}

afterReleaseBuild.dependsOn publish

wrapper {
    gradleVersion = "5.2.1"
    distributionType = Wrapper.DistributionType.ALL
}
