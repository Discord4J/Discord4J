plugins {
    id 'java'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.0'
    id 'com.gorylenko.gradle-git-properties' version '1.5.1' apply false
    id 'io.spring.dependency-management' version '1.0.4.RELEASE' apply false
}

ext {
    // Project constants
    github_org = 'Discord4J'
    project_name = 'Discord4J'
    artifact_group = 'com.discord4j'
    project_version = '3.0.0-SNAPSHOT'
    project_description = 'Java interface for the Discord API'
    project_url = 'https://discord4j.com'
    project_jdk = '1.8'

    // Dependencies
    reactor_bom_version = 'Californium-M1'
    jackson_version = '2.9.5'
    jsr305_version = '3.0.2'
    junit_version = '4.12'
    mockito_version = '2.7.22'
    logback_version = '1.3.0-alpha4'
    autoservice_version = '1.0-rc4'
    jdkstores_version = 'ea3e145'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    group = artifact_group
    version = project_version
    description = project_description

    sourceCompatibility = project_jdk
    targetCompatibility = project_jdk

    dependencyManagement {
        imports {
            mavenBom "io.projectreactor:reactor-bom:$reactor_bom_version"
        }
    }

    repositories {
        jcenter()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(Javadoc) {
        options {
            encoding = 'UTF-8'
            tags = ["apiNote:a:API Note:",
                    "implSpec:a:Implementation Requirements:",
                    "implNote:a:Implementation Note:"]
            addStringOption 'encoding', 'UTF-8'
            // adding links to javadocs for filling specific classes when not existing inside current javadoc
            links = [
                "https://docs.oracle.com/javase/8/docs/api/",
                "https://docs.oracle.com/javaee/7/api/",
                "http://fasterxml.github.io/jackson-databind/javadoc/2.9/",
                "http://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/",
                "http://projectreactor.io/docs/core/milestone/api/",
                "http://projectreactor.io/docs/netty/milestone/api/",
                "http://projectreactor.io/docs/extra/milestone/api/",
                "http://netty.io/4.1/api/"
            ]
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.incremental = true
    }

    task downloadDependencies() {
        description 'Download all dependencies to the Gradle cache'
        doLast {
            configurations.findAll { it.canBeResolved }.files
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayKey') ? project.property('bintrayKey') : System.getenv('BINTRAY_KEY')
        publications = ['maven']
        dryRun = false
        publish = true
        pkg {
            userOrg = 'austinv11'
            repo = 'maven'
            name = 'Discord4J'
            websiteUrl = project_url
            issueTrackerUrl = 'https://github.com/Discord4J/Discord4J/issues'
            vcsUrl = 'https://github.com/Discord4J/Discord4J.git'
            licenses = ['LGPL-3.0']
            labels = ['discord', 'discord4j', 'd4j', 'reactor', 'nebula']
            publicDownloadNumbers = true
            attributes = [:]
            version {
                name = project.version
                vcsTag = project.version
                gpg {
                    sign = true
                }
                if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
                    def sonatypeUsername = project.property('sonatypeUsername')
                    def sonatypePassword = project.property('sonatypePassword')
                    mavenCentralSync {
                        user = sonatypeUsername
                        password = sonatypePassword
                    }
                }
            }
        }
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'

    archivesBaseName = "discord4j-$project.name"

    tasks.withType(Javadoc) {
        title = "$archivesBaseName ${version} API"
        options.windowTitle = "$archivesBaseName ($version)"
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                artifactId archivesBaseName
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }
}

bintrayUpload.dependsOn build

task aggregateJavadoc(type: Javadoc,
    description: "Generate javadocs from all child projects as if it was a single project",
    group: JavaBasePlugin.DOCUMENTATION_GROUP
) {
    destinationDir file("${rootProject.buildDir}/docs/aggregateJavadoc")
    failOnError false
    title = "$project_name ${project_version} API"

    options {
        windowTitle = "$project_name $project_version"
        addStringOption "Xdoclint:none", "-quiet"
        author true
    }

    subprojects.each { project ->
        project.tasks.withType(Javadoc.class).each { doc ->
            source += doc.source
            classpath += doc.classpath
            excludes += doc.excludes
            includes += doc.includes
        }
    }
}

task aggregateJavadocJar(type: Jar, dependsOn: aggregateJavadoc) {
    classifier = 'javadoc'
    from aggregateJavadoc.destinationDir
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact aggregateJavadocJar
        }
    }
}

wrapper {
    gradleVersion = "4.9"
    distributionType = Wrapper.DistributionType.ALL
}
