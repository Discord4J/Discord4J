"use strict";(self.webpackChunkdiscord4j_documentation=self.webpackChunkdiscord4j_documentation||[]).push([[69],{2950:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var t=i(4848),a=i(8453);const o={id:"application-commands",title:"Application Commands",sidebar_label:"Application Commands",slug:"/interactions/application-commands"},r=void 0,s={id:"How-to Guides/Interactions/application-commands",title:"Application Commands",description:"This page is a continuation of the Interactions (Reference) which dives into what Interactions are.",source:"@site/docs/04-How-to Guides/Interactions/application-commands.mdx",sourceDirName:"04-How-to Guides/Interactions",slug:"/interactions/application-commands",permalink:"/interactions/application-commands",draft:!1,unlisted:!1,editUrl:"https://github.com/Discord4J/documentation/edit/master/docs/04-How-to Guides/Interactions/application-commands.mdx",tags:[],version:"current",lastUpdatedAt:1642807365e3,frontMatter:{id:"application-commands",title:"Application Commands",sidebar_label:"Application Commands",slug:"/interactions/application-commands"},sidebar:"mySidebar",previous:{title:"Music Bot Tutorial",permalink:"/music-bot-tutorial"},next:{title:"Auto Complete",permalink:"/interactions/auto-complete"}},l={},d=[{value:"Lifecycle",id:"lifecycle",level:2},{value:"Creating a Command",id:"creating-a-command",level:3},{value:"Global Command",id:"global-command",level:4},{value:"Guild Command",id:"guild-command",level:4},{value:"Editing a Command",id:"editing-a-command",level:3},{value:"Global Command",id:"global-command-1",level:4},{value:"Guild Command",id:"guild-command-1",level:4},{value:"Bulk Overwrite",id:"bulk-overwrite",level:4},{value:"Global Command",id:"global-command-2",level:5},{value:"Guild Command",id:"guild-command-2",level:5},{value:"Deleting a Command",id:"deleting-a-command",level:3},{value:"Global Command",id:"global-command-3",level:4},{value:"Guild Command",id:"guild-command-3",level:4},{value:"Simplifying the Lifecycle",id:"simplifying-the-lifecycle",level:3},{value:"Receiving and Responding",id:"receiving-and-responding",level:2},{value:"Receiving Commands",id:"receiving-commands",level:3},{value:"Responding to Commands",id:"responding-to-commands",level:3},{value:"Ephemeral Responses",id:"ephemeral-responses",level:3},{value:"Editing Responses",id:"editing-responses",level:3},{value:"Followups",id:"followups",level:3},{value:"Handling Options",id:"handling-options",level:3},{value:"Getting and Deleting Responses",id:"getting-and-deleting-responses",level:3},{value:"Permissions",id:"permissions",level:2},{value:"Autocomplete",id:"autocomplete",level:2},{value:"Further Reading",id:"further-reading",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["This page is a continuation of the ",(0,t.jsx)(n.a,{href:"/interactions",children:"Interactions (Reference)"})," which dives into ",(0,t.jsx)(n.em,{children:"what"})," Interactions are."]})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"This page uses a chat-input command as the example for all sections. But this code will work with all types of Application Commands."})}),"\n",(0,t.jsx)(n.h2,{id:"lifecycle",children:"Lifecycle"}),"\n",(0,t.jsx)(n.h3,{id:"creating-a-command",children:"Creating a Command"}),"\n",(0,t.jsxs)(n.p,{children:["Creating application commands are very easy, all you need to do is build the command's structure using the ",(0,t.jsx)(n.code,{children:"ApplicationCommandRequest.Builder"}),".\r\nThen use the RestClient to make the request to discord."]}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsx)(n.p,{children:"Global commands have a TTL of 1 hour. This means it will take up to 1 hour for a global command's changes to take effect in the discord client."}),(0,t.jsx)(n.p,{children:"We recommend using guild commands while developing and testing, and switching to global commands when ready to deploy."})]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"These endpoints are idempotent, meaning commands that have not changed (and are included in the request) will not change."})}),"\n",(0,t.jsx)(n.h4,{id:"global-command",children:"Global Command"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Get our application\'s ID\r\nlong applicationId = client.getRestClient().getApplicationId().block();\r\n\r\n// Build our command\'s definition\r\nApplicationCommandRequest greetCmdRequest = ApplicationCommandRequest.builder()\r\n    .name("greet")\r\n    .description("Greets You")\r\n    .addOption(ApplicationCommandOptionData.builder()\r\n        .name("name")\r\n        .description("Your name")\r\n        .type(ApplicationCommandOption.Type.STRING.getValue())\r\n        .required(true)\r\n        .build()\r\n    ).build();\r\n\r\n// Create the command with Discord\r\nclient.getRestClient().getApplicationService()\r\n    .createGlobalApplicationCommand(applicationId, greetCmdRequest)\r\n    .subscribe();\n'})}),"\n",(0,t.jsx)(n.h4,{id:"guild-command",children:"Guild Command"}),"\n",(0,t.jsx)(n.p,{children:"Creating a guild command is just as easy as creating a global command, the only extra info you need is the Guild's ID."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// application ID and command definition are the same as the global command\r\n\r\nlong guildId = 208023865127862272L; //Discord4J's server ID.\r\n\r\nclient.getRestClient().getApplicationService()\r\n    .createGuildApplicationCommand(applicationId, guildId, greetCmdRequest)\r\n    .subscribe();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"editing-a-command",children:"Editing a Command"}),"\n",(0,t.jsxs)(n.p,{children:["To edit a command, we will use the same ",(0,t.jsx)(n.code,{children:"ApplicationCommandRequest"})," we built in the last section.\r\nWe also need the ",(0,t.jsx)(n.code,{children:"ApplicationCommandData"})," that represents what discord knows about our commands."]}),"\n",(0,t.jsx)(n.h4,{id:"global-command-1",children:"Global Command"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Get the commands from discord as a Map\r\nMap<String, ApplicationCommandData> discordCommands = client.getRestClient()\r\n    .getApplicationService()\r\n    .getGlobalApplicationCommands(applicationId)\r\n    .collectMap(ApplicationCommandData::name)\r\n    .block();\r\n\r\n// Pull out the copy of the greet command\r\nApplicationCommandData discordGreetCmd = discordCommands.get(greetCmdRequest.name());\r\nlong discordGreetCmdId = Long.parseLong(discordGreetCmd.id())\r\n\r\n// Modify command\r\nclient.getRestClient().getApplicationService()\r\n    .modifyGlobalApplicationCommand(applicationId, discordGreetCmdId, greetCmdRequest)\r\n    .subscribe();\n"})}),"\n",(0,t.jsx)(n.h4,{id:"guild-command-1",children:"Guild Command"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"long guildId = 208023865127862272L; //Discord4J's server ID.\r\n\r\n// Get the commands from discord as a Map\r\nMap<String, ApplicationCommandData> discordCommands = client.getRestClient()\r\n    .getApplicationService()\r\n    .getGuildApplicationCommands(applicationId, guildId)\r\n    .collectMap(ApplicationCommandData::name)\r\n    .block();\r\n\r\n// Pull out the copy of the greet command\r\nApplicationCommandData discordGreetCmd = discordCommands.get(greetCmdRequest.name());\r\n\r\n// Modify command\r\nclient.getRestClient().getApplicationService()\r\n    .modifyGuildApplicationCommand(applicationId, guildId, Long.parseLong(discordGreetCmd.id()), greetCmdRequest)\r\n    .subscribe();\n"})}),"\n",(0,t.jsx)(n.h4,{id:"bulk-overwrite",children:"Bulk Overwrite"}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["This does ",(0,t.jsx)(n.strong,{children:"not"})," simply edit commands, but ",(0,t.jsx)(n.strong,{children:"replaces"})," them outright!"]})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"These endpoints are idempotent, meaning commands that have not changed (and are included in the request) will not change."})}),"\n",(0,t.jsx)(n.p,{children:"You may have made large changes to your commands and would rather replace them instead of updating your existing commands."}),"\n",(0,t.jsxs)(n.p,{children:["To do so, all you need is a list of ",(0,t.jsx)(n.code,{children:"ApplicationCommandRequest"})," and use the following method:"]}),"\n",(0,t.jsx)(n.h5,{id:"global-command-2",children:"Global Command"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"client.getRestClient().getApplicationService()\r\n    .bulkOverwriteGlobalApplicationCommand(applicationId, commandRequestList)\r\n    .subscribe();\n"})}),"\n",(0,t.jsx)(n.h5,{id:"guild-command-2",children:"Guild Command"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"long guildId = 208023865127862272L; //Discord4J's server ID.\r\n\r\nclient.getRestClient().getApplicationService()\r\n    .bulkOverwriteGuildApplicationCommand(applicationId, guildId, commandRequestList)\r\n    .subscribe();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"deleting-a-command",children:"Deleting a Command"}),"\n",(0,t.jsx)(n.p,{children:"Sometimes you just don't want a command anymore, in that case we can easily delete the commands we don't want."}),"\n",(0,t.jsx)(n.h4,{id:"global-command-3",children:"Global Command"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Get the commands from discord as a Map\r\nMap<String, ApplicationCommandData> discordCommands = client.getRestClient()\r\n    .getApplicationService()\r\n    .getGlobalApplicationCommands(applicationId)\r\n    .collectMap(ApplicationCommandData::name)\r\n    .block();\r\n\r\n// Get the ID of our greet command\r\nlong commandId = Long.parseLong(discordCommands.get("greet").id());\r\n\r\n// Delete it\r\nclient.getRestClient().getApplicationService()\r\n    .deleteGlobalApplicationCommand(applicationId, commandId)\r\n    .subscribe();\n'})}),"\n",(0,t.jsx)(n.h4,{id:"guild-command-3",children:"Guild Command"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'long guildId = 208023865127862272L; //Discord4J\'s server ID.\r\n\r\n// Get the commands from discord as a Map\r\nMap<String, ApplicationCommandData> discordCommands = client.getRestClient()\r\n    .getApplicationService()\r\n    .getGuildApplicationCommands(applicationId, guildId)\r\n    .collectMap(ApplicationCommandData::name)\r\n    .block();\r\n\r\n// Get the ID of our greet command\r\nlong commandId = Long.parseLong(discordCommands.get("greet").id());\r\n\r\n// Delete it\r\nclient.getRestClient().getApplicationService()\r\n    .deleteGuildApplicationCommand(applicationId, guildId, commandId)\r\n    .subscribe();\n'})}),"\n",(0,t.jsx)(n.h3,{id:"simplifying-the-lifecycle",children:"Simplifying the Lifecycle"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"This section only applies to global commands currently. Feel free to suggestion changes/additions to include simplifying guild commands."})}),"\n",(0,t.jsx)(n.p,{children:"Hardcoding commands can come with downsides. It's much harder to read and maintain the command structure and handle changes made to them.\r\nHowever, this can all be simplified easily."}),"\n",(0,t.jsxs)(n.p,{children:["Instead of hardcoding the commands, we will put commands in ",(0,t.jsx)(n.code,{children:"resources/commands"})," as their raw json form,\r\nand have a class dedicated to reading these files and handling all discord requests from above."]}),"\n",(0,t.jsxs)(n.p,{children:["We will maintain the following structure for our json files: ",(0,t.jsx)(n.code,{children:"src/main/resources/commands/*.json"})]}),"\n",(0,t.jsx)("img",{src:"/img/interactions/command-file-structure.png"}),"\n",(0,t.jsx)(n.p,{children:"Application commands follow a simple json structure defined by Discord, our greet command's json looks like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n    "name": "greet",\r\n    "description": "Greets you",\r\n    "options": [\r\n        {\r\n            "name": "name",\r\n            "description": "Your name",\r\n            "type": 3,\r\n            "required": true\r\n        }\r\n    ]\r\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:'"type": 3'})," is the option type for ",(0,t.jsx)(n.code,{children:"STRING"}),". See ",(0,t.jsx)(n.a,{href:"/interactions#option-types",children:"Interactions (Reference) - Option Types"})]})}),"\n",(0,t.jsxs)(n.p,{children:["To read these files and run our code, we will be using the ",(0,t.jsx)(n.code,{children:"GlobalCommandRegistrar"})," found in our\r\n",(0,t.jsx)(n.a,{href:"https://github.com/Discord4J/example-projects/blob/master/gradle-simple-bot/src/main/java/com/novamaday/d4j/gradle/simplebot/GlobalCommandRegistrar.java",children:"Example Projects"}),"\r\n(due to its 100 line length, it cannot easily be in a code-block on this page)."]}),"\n",(0,t.jsx)(n.p,{children:"Once that file is in your project, all you need to do is call it after logging in:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"try {\r\n    new GlobalCommandRegistrar(client.getRestClient()).registerCommands();\r\n} catch (Exception e) {\r\n    //Handle exception\r\n}\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Using the Spring Boot Framework, we can simplify this even more and remove the explicit call after logging in.\r\nSee our Spring ",(0,t.jsx)(n.a,{href:"https://github.com/Discord4J/example-projects",children:"Example Projects"})," for more information."]})}),"\n",(0,t.jsx)(n.h2,{id:"receiving-and-responding",children:"Receiving and Responding"}),"\n",(0,t.jsx)(n.p,{children:"Discord provides 2 ways to receive commands. Either through the gateway, or via a webhook. In this section, we will cover the former."}),"\n",(0,t.jsx)(n.h3,{id:"receiving-commands",children:"Receiving Commands"}),"\n",(0,t.jsx)(n.p,{children:"Every application command can be received with this simple code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"client.on(ApplicationCommandInteractionEvent.class, event -> {\r\n    // logic\r\n}).subscribe();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["However, you may not want ",(0,t.jsx)(n.em,{children:"all"})," application commands, and might just want a slash command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"client.on(ChatInputInteractionEvent.class, event -> {\r\n    // logic\r\n}).subscribe();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For message commands and user commands use ",(0,t.jsx)(n.code,{children:"MessageInteractionEvent"})," and ",(0,t.jsx)(n.code,{children:"UserInteractionEvent"})," respectively"]}),"\n",(0,t.jsx)(n.h3,{id:"responding-to-commands",children:"Responding to Commands"}),"\n",(0,t.jsxs)(n.p,{children:["There are multiple ways of responding to a command, for a list of available methods see ",(0,t.jsx)(n.a,{href:"/interactions#method-summary",children:"this section"}),". The simplest would be ",(0,t.jsx)(n.code,{children:"reply()"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'client.on(ChatInputInteractionEvent.class, event -> {\r\n    if (event.getCommandName().equals("ping")) {\r\n        return event.reply("Pong!");\r\n    }\r\n}).subscribe();\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"When you receive and interaction, you have 3 seconds to respond before it times out."})}),"\n",(0,t.jsxs)(n.p,{children:["If you can return something immediately, we use ",(0,t.jsx)(n.code,{children:"reply"}),".\r\nIf it takes longer than 3 seconds to gather the data and respond, use ",(0,t.jsx)(n.code,{children:"deferReply"})," and when you are ready to respond with data, use ",(0,t.jsx)(n.code,{children:"editReply"})," or ",(0,t.jsx)(n.code,{children:"createFollowup"})]}),"\n",(0,t.jsx)(n.p,{children:"When you use defer, you have up to 15 minutes before the interaction is no longer valid."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public static void main(String[] args) {\r\n    GatewayDiscordClient client = DiscordClientBuilder.create("token").build()\r\n        .login()\r\n        .block();\r\n\r\n    client.on(ChatInputInteractionEvent.class, event -> {\r\n        if (event.getCommandName().equals("ping")) {\r\n            return event.deferReply().then(methodThatTakesALongTime(event));\r\n        }\r\n    }).subscribe();\r\n}\r\n\r\nprivate static Mono<Message> methodThatTakesALongTime(ChatInputInteractionEvent event) {\r\n    // Do logic that takes awhile, then return\r\n    return event.createFollowup("This took awhile!");\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"ephemeral-responses",children:"Ephemeral Responses"}),"\n",(0,t.jsxs)(n.p,{children:["When using ",(0,t.jsx)(n.code,{children:"reply"}),"/",(0,t.jsx)(n.code,{children:"deferReply"}),"/",(0,t.jsx)(n.code,{children:"createFollowup"})," everyone in the channel can see this, not just the user that issued the command."]}),"\n",(0,t.jsxs)(n.p,{children:["Since you may not always want that, Discord provides ",(0,t.jsx)(n.code,{children:"ephemeral"})," versions of these response types. ",(0,t.jsx)(n.code,{children:"ephmeral"})," means that only the user who issued the command will see the response."]}),"\n",(0,t.jsx)(n.p,{children:"To respond ephemerally, we add an extra line:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'client.on(ChatInputInteractionEvent.class, event -> {\r\n    if (event.getCommandName().equals("ping")) {\r\n        return event\r\n            .reply("Pong!")\r\n            .withEphemeral(true);\r\n    }\r\n}).subscribe();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["And to ",(0,t.jsx)(n.code,{children:"deferReply"})," ephemerally:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'client.on(ChatInputInteractionEvent.class, event -> {\r\n    if (event.getCommandName().equals("ping")) {\r\n        return event.deferReply().withEphemeral(true);\r\n    }\r\n}).subscribe();\n'})}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["If you ",(0,t.jsx)(n.code,{children:"deferReply"})," ephemerally, you must use an ephemeral followup."]}),(0,t.jsxs)(n.p,{children:["The same goes in reverse, if you ",(0,t.jsx)(n.code,{children:"deferReply"})," normally, you must also follow up normally. Discord does not support mixing these response modifiers."]})]}),"\n",(0,t.jsx)(n.p,{children:"Ephemeral messages technically do not exist (like the clyde bot messages you've likely seen). When the user's client refreshes, or they switch to a different client, the ephemeral message will not be visible to them anymore."}),"\n",(0,t.jsx)(n.h3,{id:"editing-responses",children:"Editing Responses"}),"\n",(0,t.jsx)(n.p,{children:"After the initial response is sent, you may want to edit that response."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'client.on(ChatInputInteractionEvent.class, event -> {\r\n    if (event.getCommandName().equals("ping")) {\r\n        event.reply("Pong!").subscribe();\r\n\r\n        // Do something\r\n\r\n        event.editReply(InteractionReplyEditSpec.builder()\r\n            .build()\r\n            .withContentOrNull("Pong! Pong!")\r\n        ).subscribe();\r\n    }\r\n}).subscribe();\n'})}),"\n",(0,t.jsx)(n.h3,{id:"followups",children:"Followups"}),"\n",(0,t.jsx)(n.p,{children:"Sometimes, you might not want to send one response, but might want to send multiple. Fear not, Discord lets you send multiple followups as long as the interaction is valid for."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'client.on(ChatInputInteractionEvent.class, event -> {\r\n    if (event.getCommandName().equals("ping")) {\r\n        event.reply("Pong!").subscribe();\r\n\r\n        event.createFollowup("PingPing!").subscribe();\r\n        event.createFollowup("PongPong!").subscribe();\r\n    }\r\n}).subscribe();\n'})}),"\n",(0,t.jsx)(n.h3,{id:"handling-options",children:"Handling Options"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["This only applies to ",(0,t.jsx)(n.code,{children:"Chat Input"})," commands, ",(0,t.jsx)(n.code,{children:"Message"})," and ",(0,t.jsx)(n.code,{children:"User"})," commands do not support options."]})}),"\n",(0,t.jsxs)(n.p,{children:["Unlike a ping command, our greet command from earlier accepts arguments, or ",(0,t.jsx)(n.code,{children:"options"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"To get an option and assign a default value, we can use something like this to do it reactively:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'String name = event.getOption("name")\r\n            .flatMap(ApplicationCommandInteractionOption::getValue)\r\n            .map(ApplicationCommandInteractionOptionValue::asString)\r\n            .orElse("Your default value");\n'})}),"\n",(0,t.jsx)(n.p,{children:"To see what that looks like in practice:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'client.on(ChatInputInteractionEvent.class, event -> {\r\n    if (event.getCommandName().equals("greet")) {\r\n        /*\r\n        Since slash command options are optional according to discord, we will wrap it into the following function\r\n        that gets the value of our option as a String without chaining several .get() on all the optional values\r\n        In this case, there is no fear it will return empty/null as this is marked "required: true" in our json.\r\n         */\r\n        String name = event.getOption("name")\r\n            .flatMap(ApplicationCommandInteractionOption::getValue)\r\n            .map(ApplicationCommandInteractionOptionValue::asString)\r\n            .get(); //This is warning us that we didn\'t check if its present, we can ignore this on required options\r\n\r\n        //Reply to the slash command, with the name the user supplied\r\n        return event.reply()\r\n            .withEphemeral(true)\r\n            .withContent("Hello, " + name);\r\n    }\r\n}).subscribe();\n'})}),"\n",(0,t.jsx)(n.h3,{id:"getting-and-deleting-responses",children:"Getting and Deleting Responses"}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["You ",(0,t.jsx)(n.em,{children:"cannot"})," get nor delete ephemeral messages."]})}),"\n",(0,t.jsx)(n.p,{children:"In addition to editing the initial response, you can also delete it."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'event.reply("pong!").subscribe();\r\nevent.deleteReply().subscribe();\n'})}),"\n",(0,t.jsx)(n.p,{children:"Finally, you may want to get the initial reply in another part of your code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'event.reply("pong!").subscribe();\r\nMessage message = event.getReply().block();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"permissions",children:"Permissions"}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"Discord is making major changes to the permission system in the near future. Permissions will be documented then."})}),"\n",(0,t.jsx)(n.h2,{id:"autocomplete",children:"Autocomplete"}),"\n",(0,t.jsxs)(n.p,{children:["Autocompletion is handled through a secondary interaction event type.\r\nPlease refer to ",(0,t.jsx)(n.a,{href:"/interactions/auto-complete",children:"How-to Guides - Auto Complete"})," information on how to use this feature."]}),"\n",(0,t.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/examples",children:"Reference - Examples"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/interactions/auto-complete",children:"How-to Guides - Auto Complete"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://discord.com/developers/docs/interactions/application-commands",children:"Discord Docs - Application Commands"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>s});var t=i(6540);const a={},o=t.createContext(a);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);