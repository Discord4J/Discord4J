"use strict";(self.webpackChunkdiscord4j_documentation=self.webpackChunkdiscord4j_documentation||[]).push([[2],{6902:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>c,default:()=>g,frontMatter:()=>l,metadata:()=>a,toc:()=>h});var t=n(4848),o=n(8453),i=n(1386),s=n(9635);const l={id:"logging",title:"Logging",sidebar_label:"Logging",slug:"/logging"},c=void 0,a={id:"How-to Guides/logging",title:"Logging",description:"While optional, we do recommend installing and configuring a logging implementation to aid in debugging and provide useful information for day-to-day operations; plus, it's good practice. Discord4J uses Reactor's logging implementation, which is compatible with any SLF4J implementation. We recommend using Logback for maximum flexibility and customization.",source:"@site/docs/04-How-to Guides/logging.mdx",sourceDirName:"04-How-to Guides",slug:"/logging",permalink:"/logging",draft:!1,unlisted:!1,editUrl:"https://github.com/Discord4J/documentation/edit/master/docs/04-How-to Guides/logging.mdx",tags:[],version:"current",lastUpdatedAt:1631899753e3,frontMatter:{id:"logging",title:"Logging",sidebar_label:"Logging",slug:"/logging"},sidebar:"mySidebar",previous:{title:"Error Handling",permalink:"/error-handling"},next:{title:"Sharding",permalink:"/sharding"}},d={},h=[{value:"Implementation",id:"implementation",level:2},{value:"Logging a Stream",id:"logging-a-stream",level:2},{value:"Configuration",id:"configuration",level:2},{value:"SLF4J Simple",id:"slf4j-simple",level:3},{value:"Logback",id:"logback",level:3},{value:"Log4J2",id:"log4j2",level:3},{value:"Available loggers",id:"available-loggers",level:2},{value:"Advanced filtering using Logback",id:"advanced-filtering-using-logback",level:3}];function u(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["While optional, we do recommend installing and configuring a logging implementation to aid in debugging and provide useful information for day-to-day operations; plus, it's ",(0,t.jsx)(r.a,{href:"https://softwareengineering.stackexchange.com/questions/37294/logging-why-and-what",children:"good practice"}),". Discord4J uses Reactor's ",(0,t.jsx)(r.a,{href:"https://projectreactor.io/docs/core/release/reference/#_logging_a_sequence",children:"logging implementation"}),", which is compatible with any ",(0,t.jsx)(r.a,{href:"https://www.slf4j.org/",children:"SLF4J"})," implementation. We recommend using ",(0,t.jsx)(r.a,{href:"https://logback.qos.ch/",children:"Logback"})," for maximum flexibility and customization."]}),"\n",(0,t.jsxs)(i.A,{defaultValue:"gradle",values:[{label:"Gradle",value:"gradle"},{label:"Maven",value:"maven"},{label:"SBT",value:"sbt"}],children:[(0,t.jsx)(s.A,{value:"gradle",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-groovy",children:"dependencies {\r\n  implementation 'ch.qos.logback:logback-classic:$logback_version'\r\n}\n"})})}),(0,t.jsx)(s.A,{value:"maven",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:"<dependencies>\r\n  <dependency>\r\n    <groupId>ch.qos.logback</groupId>\r\n    <artifactId>logback-classic</artifactId>\r\n    <version>${logback_version}</version>\r\n  </dependency>\r\n</dependencies>\n"})})}),(0,t.jsx)(s.A,{value:"sbt",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-scala",children:'libraryDependencies ++= Seq(\r\n  "ch.qos.logback" % "logback-classic" % s"$logbackVersion"\r\n)\n'})})})]}),"\n",(0,t.jsx)(r.h2,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsxs)(r.p,{children:["Discord4J utilizes logging throughout their modules that will be forwarded to your implementation of choice, according to Reactor ",(0,t.jsx)(r.a,{href:"https://projectreactor.io/docs/core/release/api/reactor/util/Loggers.html",children:(0,t.jsx)(r.code,{children:"Loggers"})})," class which picks up common logging frameworks on the startup and configures logging appropriately."]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["If you have any ",(0,t.jsx)(r.a,{href:"https://www.slf4j.org/",children:"SLF4J"})," implementation available, it will be picked up first."]}),"\n",(0,t.jsxs)(r.li,{children:["As a fallback, it will log to the console, using ",(0,t.jsx)(r.code,{children:"System.err"})," for the ",(0,t.jsx)(r.code,{children:"WARN"})," and ",(0,t.jsx)(r.code,{children:"ERROR"})," log levels and ",(0,t.jsx)(r.code,{children:"System.out"})," for the rest."]}),"\n",(0,t.jsxs)(r.li,{children:["If you prefer to log to JDK ",(0,t.jsx)(r.code,{children:"java.util.logging"})," you must set the ",(0,t.jsx)(r.code,{children:"reactor.logging.fallback"})," system property to ",(0,t.jsx)(r.code,{children:"JDK"}),", For example, if running from the command line:"]}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"-Dreactor.logging.fallback=JDK\n"})}),"\n",(0,t.jsx)(r.h2,{id:"logging-a-stream",children:"Logging a Stream"}),"\n",(0,t.jsxs)(r.p,{children:["You have the ability to log events in a reactive sequence, like those coming from Discord4J. The ",(0,t.jsx)(r.code,{children:"log()"})," operator is able to do that, peeking at every signal going through a sequence. You can learn more about this operator on the Reactor reference guide ",(0,t.jsx)(r.a,{href:"http://projectreactor.io/docs/core/release/reference/#_logging_a_stream",children:"here"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(r.h3,{id:"slf4j-simple",children:"SLF4J Simple"}),"\n",(0,t.jsxs)(r.p,{children:["SLF4J Simple is a basic implementation that outputs INFO and higher logging directly to System.err. It's easy to use and requires no additional files. Check it out ",(0,t.jsx)(r.a,{href:"https://mvnrepository.com/artifact/org.slf4j/slf4j-simple/1.7.30",children:"here"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"logback",children:"Logback"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://logback.qos.ch/",children:"Logback"})," is an SLF4J implementation you can use with Discord4J to further configure logging. The following is an example to use it. First add ",(0,t.jsx)(r.a,{href:"https://search.maven.org/artifact/ch.qos.logback/logback-classic/1.2.3/jar",children:"this dependency"})," to your project. Then create a file under ",(0,t.jsx)(r.code,{children:"src/main/resources"})," named ",(0,t.jsx)(r.code,{children:"logback.xml"})," with the following content:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\r\n<configuration scan="true">\r\n    \x3c!-- You can configure per-logger level at this point --\x3e\r\n    \x3c!-- This set of preconfigured loggers is good if you want to have a DEBUG level as baseline --\x3e\r\n    <logger name="io.netty" level="INFO"/>\r\n    <logger name="reactor" level="INFO"/>\r\n\r\n    \x3c!-- Display the logs in your console with the following format --\x3e\r\n    \x3c!-- You can learn more about this here: https://logback.qos.ch/manual/layouts.html#ClassicPatternLayout --\x3e\r\n    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">\r\n        <encoder>\r\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\r\n        </encoder>\r\n    </appender>\r\n\r\n    \x3c!-- Log to a file as well, including size and time based rolling --\x3e\r\n    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">\r\n        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">\r\n            <fileNamePattern>logs/d4j.%d{yyyy-MM-dd}.%i.log</fileNamePattern>\r\n            <maxFileSize>100MB</maxFileSize>\r\n            <maxHistory>90</maxHistory>\r\n        </rollingPolicy>\r\n        <encoder>\r\n            <charset>UTF-8</charset>\r\n            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %-40.40logger{39} : %msg%n</Pattern>\r\n        </encoder>\r\n        <prudent>true</prudent>\r\n    </appender>\r\n\r\n    \x3c!-- Avoid blocking while logging to file by wrapping our file appender with async capabilities --\x3e\r\n    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">\r\n        <queueSize>512</queueSize>\r\n        <appender-ref ref="FILE"/>\r\n    </appender>\r\n\r\n    \x3c!-- Here you can set the base logger level. If DEBUG is too chatty for you, you can use INFO --\x3e\r\n    \x3c!-- Possible options are: ALL, TRACE, DEBUG, INFO, WARN, ERROR, OFF --\x3e\r\n    <root level="DEBUG">\r\n        <appender-ref ref="CONSOLE"/>\r\n        <appender-ref ref="ASYNC"/>\r\n    </root>\r\n</configuration>\n'})}),"\n",(0,t.jsx)(r.h3,{id:"log4j2",children:"Log4J2"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://logging.apache.org/log4j/2.x/",children:"Log4J2"})," can also work with Discord4J using an SLF4J adapter. To begin please add ",(0,t.jsx)(r.a,{href:"https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl",children:"log4j-slf4j-impl"})," as dependency."]}),"\n",(0,t.jsx)(r.h2,{id:"available-loggers",children:"Available loggers"}),"\n",(0,t.jsx)(r.p,{children:"Discord4J has a logger structure that differs from v2, where you can tweak at the logger level the verbosity you prefer."}),"\n",(0,t.jsxs)(r.p,{children:["If you want to reduce the logging produced by websocket data you can use the following in your ",(0,t.jsx)(r.code,{children:"logback.xml"})," file:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<logger name="discord4j.gateway" level="INFO"/>\n'})}),"\n",(0,t.jsxs)(r.p,{children:["The following table shows the levels you can set each logger to obtain your preferred details. They work on a hierarchy basis therefore setting a level to ",(0,t.jsx)(r.code,{children:"discord4j.rest"})," affects every logger under it like ",(0,t.jsx)(r.code,{children:"discord4j.rest.traces"}),"."]}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Logger"}),(0,t.jsx)(r.th,{children:"Level"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"io.netty"})}),(0,t.jsx)(r.td,{children:"DEBUG"}),(0,t.jsx)(r.td,{children:"Low level details of underlying Netty implementation"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"reactor"})}),(0,t.jsx)(r.td,{children:"DEBUG"}),(0,t.jsx)(r.td,{children:"Low level details for Reactor operations"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"reactor.netty"})}),(0,t.jsx)(r.td,{children:"DEBUG"}),(0,t.jsx)(r.td,{children:"Details about Reactor Netty network operations"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.core"})}),(0,t.jsx)(r.td,{children:"INFO"}),(0,t.jsx)(r.td,{children:"Version information about Discord4J"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.core.events"})}),(0,t.jsx)(r.td,{children:"DEBUG"}),(0,t.jsx)(r.td,{children:"Event dispatcher subscription information"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.core.events"})}),(0,t.jsx)(r.td,{children:"TRACE"}),(0,t.jsx)(r.td,{children:"Event dispatcher event instances being published"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.core.events.dispatch"})}),(0,t.jsx)(r.td,{children:"DEBUG"}),(0,t.jsx)(r.td,{children:"Requests made by Discord4J while converting inbound payloads into events"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.core.events.dispatch"})}),(0,t.jsx)(r.td,{children:"TRACE"}),(0,t.jsx)(r.td,{children:"Details about caching while converting inbound payloads into events"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.core.state"})}),(0,t.jsx)(r.td,{children:"DEBUG"}),(0,t.jsx)(r.td,{children:"Details about entity cache configuration"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.core.shard"})}),(0,t.jsx)(r.td,{children:"DEBUG"}),(0,t.jsx)(r.td,{children:"Details about shard group bootstrapping"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.rest.request"})}),(0,t.jsx)(r.td,{children:"DEBUG"}),(0,t.jsxs)(r.td,{children:["HTTP requests made by Discord4J, for example ",(0,t.jsx)(r.code,{children:"GET /gateway/bot"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.rest.request"})}),(0,t.jsx)(r.td,{children:"TRACE"}),(0,t.jsx)(r.td,{children:"Extra details about the lifecycle of an HTTP request"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.limiter"})}),(0,t.jsx)(r.td,{children:"TRACE"}),(0,t.jsx)(r.td,{children:"Lifecycle of the default rate limiter implementation"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.rest.http.JacksonWriterStrategy"})}),(0,t.jsx)(r.td,{children:"TRACE"}),(0,t.jsx)(r.td,{children:"HTTP request JSON body contents"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.rest.http.JacksonReaderStrategy"})}),(0,t.jsx)(r.td,{children:"TRACE"}),(0,t.jsx)(r.td,{children:"HTTP response JSON body contents"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.rest.http.client.DiscordWebClient"})}),(0,t.jsx)(r.td,{children:"TRACE"}),(0,t.jsx)(r.td,{children:"Lifecycle of the REST API client"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.gateway"})}),(0,t.jsx)(r.td,{children:"INFO"}),(0,t.jsx)(r.td,{children:"Main events of Discord Gateway connections (connected, reconnects, disconnects)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.gateway"})}),(0,t.jsx)(r.td,{children:"DEBUG"}),(0,t.jsx)(r.td,{children:"Details of Discord Gateway connections (heartbeats, reconnect reasons)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.gateway.protocol.sender"})}),(0,t.jsx)(r.td,{children:"TRACE"}),(0,t.jsx)(r.td,{children:"JSON payload sent to Discord Gateway"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.gateway.protocol.receiver"})}),(0,t.jsx)(r.td,{children:"TRACE"}),(0,t.jsx)(r.td,{children:"JSON payload received from Discord Gateway"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.voice"})}),(0,t.jsx)(r.td,{children:"INFO"}),(0,t.jsx)(r.td,{children:"Main events of Discord Voice Gateway connections (connecting, connected, reconnects, disconnects)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.voice"})}),(0,t.jsx)(r.td,{children:"DEBUG"}),(0,t.jsx)(r.td,{children:"Details of Discord Gateway connections (heartbeats, reconnect reasons)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"reactor.netty.udp"})}),(0,t.jsx)(r.td,{children:"DEBUG"}),(0,t.jsx)(r.td,{children:"Details about Reactor Netty UDP connections (used by voice)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.voice.protocol.sender"})}),(0,t.jsx)(r.td,{children:"TRACE"}),(0,t.jsx)(r.td,{children:"JSON payload sent to Discord Voice Gateway"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.voice.protocol.receiver"})}),(0,t.jsx)(r.td,{children:"TRACE"}),(0,t.jsx)(r.td,{children:"JSON payload received from Discord Voice Gateway"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.voice.protocol.udp.sender"})}),(0,t.jsx)(r.td,{children:"TRACE"}),(0,t.jsx)(r.td,{children:"JSON payload sent to a Discord Voice Server"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"discord4j.voice.protocol.udp.receiver"})}),(0,t.jsx)(r.td,{children:"TRACE"}),(0,t.jsx)(r.td,{children:"JSON payload received from a Discord Voice Server"})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"advanced-filtering-using-logback",children:"Advanced filtering using Logback"}),"\n",(0,t.jsxs)(r.p,{children:["If you're looking to filter out certain gateway event types, you could copy ",(0,t.jsx)(r.a,{href:"https://github.com/Discord4J/Discord4J/blob/master/core/src/test/java/discord4j/core/logback/GatewayEventFilter.java",children:"this custom TurboFilter"})," to your project or as a start point for your own."]}),"\n",(0,t.jsxs)(r.p,{children:["Afterwards, apply it to your ",(0,t.jsx)(r.code,{children:"logback.xml"}),", for example the following would only show created message events:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<configuration>\r\n    <logger name="discord4j.gateway.protocol.receiver" level="TRACE"/>\r\n    <turboFilter class="discord4j.core.logback.GatewayEventFilter">\r\n        <Logger>discord4j.gateway.protocol.receiver</Logger>\r\n        <Include>MESSAGE_CREATE</Include>\r\n    </turboFilter>\r\n    ...\n'})}),"\n",(0,t.jsx)(r.p,{children:"While this one would show all events except presence updates:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<configuration>\r\n    <logger name="discord4j.gateway.protocol.receiver" level="TRACE"/>\r\n    <turboFilter class="discord4j.core.logback.GatewayEventFilter">\r\n        <Logger>discord4j.gateway.protocol.receiver</Logger>\r\n        <Exclude>PRESENCE_UPDATE</Exclude>\r\n    </turboFilter>\r\n    ...\n'})}),"\n",(0,t.jsxs)(r.p,{children:["The value like ",(0,t.jsx)(r.code,{children:"PRESENCE_UPDATE"})," must match from the ones in ",(0,t.jsx)(r.a,{href:"https://github.com/Discord4J/Discord4J/blob/master/gateway/src/main/java/discord4j/gateway/json/dispatch/EventNames.java",children:"this"})," file."]}),"\n",(0,t.jsxs)(r.p,{children:["For complete control over what you want to filter, use JaninoEvaluator. First add ",(0,t.jsx)(r.a,{href:"https://search.maven.org/artifact/org.codehaus.janino/janino/3.0.10/jar",children:"janino"})," as a dependency and then apply the following to your ",(0,t.jsx)(r.code,{children:"logback.xml"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">\r\n        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">\r\n            <evaluator>\r\n                <expression>return formattedMessage.contains("PresenceUpdate");</expression>\r\n            </evaluator>\r\n            <OnMismatch>NEUTRAL</OnMismatch>\r\n            <OnMatch>DENY</OnMatch>\r\n        </filter>\r\n        <encoder>\r\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\r\n        </encoder>\r\n    </appender>\n'})}),"\n",(0,t.jsxs)(r.p,{children:["For more details of what you can put under the ",(0,t.jsx)(r.code,{children:"<expression>"})," attribute, see ",(0,t.jsx)(r.a,{href:"https://logback.qos.ch/manual/filters.html#JaninoEventEvaluator",children:"this"})," documentation page."]})]})}function g(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},9635:(e,r,n)=>{n.d(r,{A:()=>s});n(6540);var t=n(4164);const o={tabItem:"tabItem_Ymn6"};var i=n(4848);function s(e){let{children:r,hidden:n,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(o.tabItem,s),hidden:n,children:r})}},1386:(e,r,n)=>{n.d(r,{A:()=>w});var t=n(6540),o=n(4164),i=n(3104),s=n(6347),l=n(205),c=n(7485),a=n(1682),d=n(9466);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:r,children:n}=e;return(0,t.useMemo)((()=>{const e=r??function(e){return h(e).map((e=>{let{props:{value:r,label:n,attributes:t,default:o}}=e;return{value:r,label:n,attributes:t,default:o}}))}(n);return function(e){const r=(0,a.X)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function g(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function j(e){let{queryString:r=!1,groupId:n}=e;const o=(0,s.W6)(),i=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,c.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const r=new URLSearchParams(o.location.search);r.set(i,e),o.replace({...o.location,search:r.toString()})}),[i,o])]}function x(e){const{defaultValue:r,queryString:n=!1,groupId:o}=e,i=u(e),[s,c]=(0,t.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!g({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:r,tabValues:i}))),[a,h]=j({queryString:n,groupId:o}),[x,p]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[o,i]=(0,d.Dv)(n);return[o,(0,t.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:o}),m=(()=>{const e=a??x;return g({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{m&&c(m)}),[m]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!g({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),p(e)}),[h,p,i]),tabValues:i}}var p=n(2303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=n(4848);function b(e){let{className:r,block:n,selectedValue:t,selectValue:s,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:a}=(0,i.a_)(),d=e=>{const r=e.currentTarget,n=c.indexOf(r),o=l[n].value;o!==t&&(a(r),s(o))},h=e=>{let r=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;r=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;r=c[n]??c[c.length-1];break}}r?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},r),children:l.map((e=>{let{value:r,label:n,attributes:i}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:t===r?0:-1,"aria-selected":t===r,ref:e=>c.push(e),onKeyDown:h,onClick:d,...i,className:(0,o.A)("tabs__item",m.tabItem,i?.className,{"tabs__item--active":t===r}),children:n??r},r)}))})}function v(e){let{lazy:r,children:n,selectedValue:o}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=i.find((e=>e.props.value===o));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:i.map(((e,r)=>(0,t.cloneElement)(e,{key:r,hidden:e.props.value!==o})))})}function y(e){const r=x(e);return(0,f.jsxs)("div",{className:(0,o.A)("tabs-container",m.tabList),children:[(0,f.jsx)(b,{...r,...e}),(0,f.jsx)(v,{...r,...e})]})}function w(e){const r=(0,p.A)();return(0,f.jsx)(y,{...e,children:h(e.children)},String(r))}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>l});var t=n(6540);const o={},i=t.createContext(o);function s(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);