"use strict";(self.webpackChunkdiscord4j_documentation=self.webpackChunkdiscord4j_documentation||[]).push([[516],{284:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var o=t(4848),s=t(8453);const i={id:"buttons",title:"Buttons",sidebar_label:"Buttons",slug:"/interactions/buttons"},r=void 0,a={id:"How-to Guides/Interactions/buttons",title:"Buttons",description:"This page is a continuation of the Interactions (Reference) which dives into what Interactions are.",source:"@site/docs/04-How-to Guides/Interactions/buttons.mdx",sourceDirName:"04-How-to Guides/Interactions",slug:"/interactions/buttons",permalink:"/interactions/buttons",draft:!1,unlisted:!1,editUrl:"https://github.com/Discord4J/documentation/edit/master/docs/04-How-to Guides/Interactions/buttons.mdx",tags:[],version:"current",lastUpdatedAt:1632501638e3,frontMatter:{id:"buttons",title:"Buttons",sidebar_label:"Buttons",slug:"/interactions/buttons"},sidebar:"mySidebar",previous:{title:"Auto Complete",permalink:"/interactions/auto-complete"},next:{title:"Select Menus",permalink:"/interactions/select-menus"}},c={},d=[{value:"Creating Buttons",id:"creating-buttons",level:2},{value:"Creating and sending buttons for a regular message",id:"creating-and-sending-buttons-for-a-regular-message",level:3},{value:"Buttons in a component response",id:"buttons-in-a-component-response",level:3},{value:"Link Buttons",id:"link-buttons",level:3},{value:"Disabled Buttons",id:"disabled-buttons",level:3},{value:"Emoji Buttons",id:"emoji-buttons",level:3},{value:"Using a Temporary Listener To Respond",id:"using-a-temporary-listener-to-respond",level:2},{value:"Further Reading",id:"further-reading",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["This page is a continuation of the ",(0,o.jsx)(n.a,{href:"/interactions",children:"Interactions (Reference)"})," which dives into ",(0,o.jsx)(n.em,{children:"what"})," Interactions are."]})}),"\n",(0,o.jsx)(n.h2,{id:"creating-buttons",children:"Creating Buttons"}),"\n",(0,o.jsx)(n.p,{children:"Creating buttons is extremely easy with Discord4J. You can add buttons to any message the bot sends, including responses to application commands or other interactions!"}),"\n",(0,o.jsx)(n.h3,{id:"creating-and-sending-buttons-for-a-regular-message",children:"Creating and sending buttons for a regular message"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Whatever channel you want the message in\r\nSnowflake channelId = Snowflake.of(0);\r\n\r\nButton button = Button.primary("custom-id", "Click me!!");\r\n\r\nclient.getChannelById(channelId)\r\n    .ofType(GuildMessageChannel.class)\r\n    .flatMap(channel -> channel.createMessage(\r\n        MessageCreateSpec.builder()\r\n        // Buttons must be in action rows\r\n        .addComponent(ActionRow.of(button))\r\n        .build()\r\n    )\r\n).subscribe();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"buttons-in-a-component-response",children:"Buttons in a component response"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'Button button = Button.success("custom-id", "Pong?");\r\n\r\nclient.on(ChatInputInteractionEvent.class, event -> {\r\n    if (event.getCommandName().equals("ping")) {\r\n        return event.reply("Pong!")\r\n            .withComponents(ActionRow.of(button));\r\n    }\r\n}).subscribe();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"link-buttons",children:"Link Buttons"}),"\n",(0,o.jsxs)(n.p,{children:["You may want to direct a user to a website when they click a button, to do this we use ",(0,o.jsx)(n.code,{children:"Button.link()"})," as so:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'Button button = Button.link("https://discord4j.com", "Discord4J");\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"caution",children:(0,o.jsxs)(n.p,{children:["Link buttons do ",(0,o.jsx)(n.strong,{children:"not"})," send interaction events when clicked."]})}),"\n",(0,o.jsx)(n.h3,{id:"disabled-buttons",children:"Disabled Buttons"}),"\n",(0,o.jsx)(n.p,{children:"If you want to prevent a button from being used, you can easily set the button to being disabled."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'Button button = Button.danger("custom-id", "Danger!!").disabled();\n'})}),"\n",(0,o.jsx)(n.p,{children:"This works for all button styles."}),"\n",(0,o.jsx)(n.h3,{id:"emoji-buttons",children:"Emoji Buttons"}),"\n",(0,o.jsx)(n.p,{children:"If you want an emoji displayed rather than a text label we would use the following code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Custom non-animated emote\r\nReactionEmoji customEmoji = ReactionEmoji.of(546687597246939136L, "d4j", false);\r\nButton customEmoteButton = Button.primary("custom-id", customEmoji);\r\n\r\n// Unicode emote\r\nReactionEmoji unicodeEmoji = ReactionEmoji.unicode("\\u2764");\r\nButton unicodeEmoteButton = Button.secondary("custom-id-2", unicodeEmoji);\n'})}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsxs)(n.p,{children:["To get the ID of a specific custom emoji, put the emoji in chat, right click, and click ",(0,o.jsx)(n.code,{children:"copy link"}),". In that link, is the emoji's ID."]}),(0,o.jsxs)(n.p,{children:["For example, the D4J emote in our server.\r\nIts link is: ",(0,o.jsx)(n.code,{children:"https://cdn.discordapp.com/emojis/546687597246939136.png?v=1"})," and the ID is ",(0,o.jsx)(n.code,{children:"546687597246939136"})]})]}),"\n",(0,o.jsx)(n.h2,{id:"using-a-temporary-listener-to-respond",children:"Using a Temporary Listener To Respond"}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["If you would like to always respond to button interactions, you can easily do so by creating a custom listener just as we showed in\r\n",(0,o.jsx)(n.a,{href:"/interactions/application-commands#receiving-commands",children:"Application Commands - Receiving"}),", using the ",(0,o.jsx)(n.code,{children:"ButtonInteractionEvent"})," class."]})}),"\n",(0,o.jsx)(n.p,{children:"Like Application Commands, buttons are always valid, no matter how much time has passed since the message was created. Responding to a button days, or weeks after its creation may not always be feasible.\r\nTo counteract this, we can create a temporary listener that automatically times out."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Whatever channel you want the message in\r\nSnowflake channelId = Snowflake.of(0);\r\n\r\nButton button = Button.primary("custom-id", "Click me!!");\r\n\r\nclient.getChannelById(channelId)\r\n    .ofType(GuildMessageChannel.class)\r\n    .flatMap(channel -> {\r\n        Mono<Message> createMessageMono = channel.createMessage(MessageCreateSpec.builder()\r\n            .addComponent(ActionRow.of(button))\r\n            .build());\r\n\r\n        Mono<Void> tempListener = client.on(ButtonInteractionEvent.class, event -> {\r\n            if (event.getCustomId().equals("custom-id")) {\r\n                return event.reply("You clicked me!").withEphemeral(true);\r\n            } else {\r\n                // Ignore it\r\n                return Mono.empty();\r\n            }\r\n        }).timeout(Duration.ofMinutes(30)) // Timeout after 30 minutes\r\n        // Handle TimeoutException that will be thrown when the above times out\r\n        .onErrorResume(TimeoutException.class, ignore -> Mono.empty())\r\n        .then(); //Transform the flux to a mono\r\n\r\n        //Return both of the monos together\r\n        return createMessageMono.then(tempListener);\r\n    }).subscribe();\n'})}),"\n",(0,o.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/examples",children:"Reference - Examples"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://discord.com/developers/docs/interactions/message-components#buttons",children:"Discord Docs - Buttons"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);