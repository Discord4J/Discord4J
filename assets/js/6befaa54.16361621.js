"use strict";(self.webpackChunkdiscord4j_documentation=self.webpackChunkdiscord4j_documentation||[]).push([[175],{3788:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=t(4848),s=t(8453);const i={id:"migrating-from-v3-1-to-v3-2",title:"Migrating from v3.1 to v3.2",sidebar_label:"Migrating from v3.1 to v3.2",slug:"/migrating-from-v3-1-to-v3-2"},o=void 0,a={id:"Migration Guides/migrating-from-v3-1-to-v3-2",title:"Migrating from v3.1 to v3.2",description:"This article should help you update your bot from Discord4J v3.1.x to v3.2.0. This new major release is over a year",source:"@site/docs/07-Migration Guides/migrating-from-v3-1-to-v3-2.mdx",sourceDirName:"07-Migration Guides",slug:"/migrating-from-v3-1-to-v3-2",permalink:"/migrating-from-v3-1-to-v3-2",draft:!1,unlisted:!1,editUrl:"https://github.com/Discord4J/documentation/edit/master/docs/07-Migration Guides/migrating-from-v3-1-to-v3-2.mdx",tags:[],version:"current",lastUpdatedAt:1634498396e3,frontMatter:{id:"migrating-from-v3-1-to-v3-2",title:"Migrating from v3.1 to v3.2",sidebar_label:"Migrating from v3.1 to v3.2",slug:"/migrating-from-v3-1-to-v3-2"},sidebar:"mySidebar",previous:{title:"Migrating from v3.0 to v3.1",permalink:"/migrating-from-v3-0-to-v3-1"}},c={},d=[{value:"Before you start",id:"before-you-start",level:2},{value:"Updating dependencies",id:"updating-dependencies",level:2},{value:"Gradle",id:"gradle",level:3},{value:"Maven",id:"maven",level:3},{value:"Discord4J features",id:"discord4j-features",level:2},{value:"Gateway Intents",id:"gateway-intents",level:3},{value:"New entity cache API",id:"new-entity-cache-api",level:3},{value:"New bot presence API",id:"new-bot-presence-api",level:3},{value:"New request spec API",id:"new-request-spec-api",level:3},{value:"Builder",id:"builder",level:4},{value:"Withers",id:"withers",level:4},{value:"Fluent Publishers",id:"fluent-publishers",level:4},{value:"Legacy Specs",id:"legacy-specs",level:4},{value:"Interactions",id:"interactions",level:3},{value:"Renamed interaction types",id:"renamed-interaction-types",level:4},{value:"Webhook execution",id:"webhook-execution",level:4},{value:"Ephemeral variants",id:"ephemeral-variants",level:4},{value:"Advanced features",id:"advanced-features",level:2},{value:"Directly querying a store",id:"directly-querying-a-store",level:3},{value:"Customizing a <code>StoreLayout</code>",id:"customizing-a-storelayout",level:3},{value:"Other features",id:"other-features",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This article should help you update your bot from Discord4J v3.1.x to v3.2.0. This new major release is over a year\r\nin the making and has lots of changes."}),"\n",(0,r.jsx)(n.h2,{id:"before-you-start",children:"Before you start"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["If you encounter an issue while following this guide or discover something missing, feel free to suggest changes or discuss them in our ",(0,r.jsx)(n.a,{href:"https://discord.gg/d4j",children:"server"}),". Thanks!"]})}),"\n",(0,r.jsx)(n.h2,{id:"updating-dependencies",children:"Updating dependencies"}),"\n",(0,r.jsxs)(n.p,{children:["Discord4J v3.2 depends on Reactor 2020 release train (",(0,r.jsx)(n.a,{href:"https://github.com/reactor/reactor-core",children:"Reactor Core"})," 3.4.x and ",(0,r.jsx)(n.a,{href:"https://github.com/reactor/reactor-netty",children:"Reactor Netty"})," 1.0.x). It maintains the JDK 8 baseline and includes other dependency upgrades like:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"discord-json 1.6 (from 1.5)"}),"\n",(0,r.jsx)(n.li,{children:"jackson-databind 2.12 (from 2.11)"}),"\n",(0,r.jsx)(n.li,{children:"caffeine 2.8 (new dependency)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"gradle",children:"Gradle"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-groovy",children:"repositories {\r\n  mavenCentral()\r\n}\r\n\r\ndependencies {\r\n  implementation 'com.discord4j:discord4j-core:3.2.0'\r\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"maven",children:"Maven"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependencies>\r\n    <dependency>\r\n        <groupId>com.discord4j</groupId>\r\n        <artifactId>discord4j-core</artifactId>\r\n        <version>3.2.0</version>\r\n    </dependency>\r\n</dependencies>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"discord4j-features",children:"Discord4J features"}),"\n",(0,r.jsx)(n.h3,{id:"gateway-intents",children:"Gateway Intents"}),"\n",(0,r.jsxs)(n.p,{children:["The intent system is now mandatory in the Gateway version used with v3.2. To retain the previous behavior, use ",(0,r.jsx)(n.code,{children:"setEnabledIntents(IntentSet.all())"})," when building a Gateway-capable client. For more information about this feature check ",(0,r.jsx)(n.a,{href:"https://discord.com/developers/docs/topics/gateway#gateway-intents",children:"official docs"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'GatewayDiscordClient client = DiscordClient.create(System.getenv("token"))\r\n        .gateway()\r\n        .setEnabledIntents(IntentSet.all())\r\n        .login()\r\n        .block();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Otherwise the default will be ",(0,r.jsx)(n.code,{children:"IntentSet.nonPrivileged()"}),". Discord might be changing the set of non-privileged intents in the future, particularly message create ",(0,r.jsx)(n.a,{href:"https://support-dev.discord.com/hc/en-us/articles/4404772028055",children:"becoming privileged in 2022"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If you get an error such as ",(0,r.jsx)(n.code,{children:"WebSocket closed: 4014 Disallowed intent(s)"}),", make sure you're allowed to use the intents you enabled, this can be done in your developer portal bot page, look for ",(0,r.jsx)(n.strong,{children:"Privileged Gateway Intents"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"new-entity-cache-api",children:"New entity cache API"}),"\n",(0,r.jsxs)(n.p,{children:["One of the most notable change is the way our ",(0,r.jsx)(n.code,{children:"Store"})," abstraction works for entity caching. If you use a custom ",(0,r.jsx)(n.code,{children:"StoreService"}),", for quick migration you need to adapt it in this way:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'GatewayDiscordClient client = DiscordClient.create(System.getenv("token"))\r\n        .gateway()\r\n        .setStore(Store.fromLayout(LegacyStoreLayout.of(myStoreService)))\r\n        .login()\r\n        .block();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Where ",(0,r.jsx)(n.code,{children:"myStoreService"})," is what you used previously, for instance:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"StoreService myStoreService = MappingStoreService.create()\r\n    .setMapping(new NoOpStoreService(), MessageData.class)\r\n    .setFallback(new JdkStoreService());\n"})}),"\n",(0,r.jsx)(n.h3,{id:"new-bot-presence-api",children:"New bot presence API"}),"\n",(0,r.jsxs)(n.p,{children:["After ",(0,r.jsx)(n.a,{href:"https://github.com/Discord4J/Discord4J/pull/874",children:"#874"}),", you have to update how bot presence is set when connecting and updated:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"ClientPresence"})," instead of ",(0,r.jsx)(n.code,{children:"Presence"})]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"ClientActivity"})," instead of ",(0,r.jsx)(n.code,{children:"Activity"})]}),"\n",(0,r.jsxs)(n.li,{children:["Prefer calling ",(0,r.jsx)(n.code,{children:"setInitialPresence"})," over ",(0,r.jsx)(n.code,{children:"setInitialStatus"})]}),"\n",(0,r.jsxs)(n.li,{children:["This also affects methods like ",(0,r.jsx)(n.code,{children:"GatewayDiscordClient::updatePresence"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'DiscordClient.create(System.getenv("token"))\r\n        .gateway()\r\n        .setInitialPresence(s -> ClientPresence.invisible())\r\n        .withGateway(client -> client.on(ReadyEvent.class)\r\n                .doOnNext(ready -> log.info("Logged in as {}", ready.getSelf().getUsername()))\r\n                .then())\r\n        .block();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"new-request-spec-api",children:"New request spec API"}),"\n",(0,r.jsxs)(n.p,{children:["A large effort was introduced in ",(0,r.jsx)(n.a,{href:"https://github.com/Discord4J/Discord4J/pull/927",children:"#927"})," that provides different patterns of building and executing API requests to Discord. This addresses some issues of the ",(0,r.jsx)(n.code,{children:"Consumer"}),"-based specs when used for templating, and allows more fluent calls for convenience."]}),"\n",(0,r.jsx)(n.p,{children:"Consider the following example of spec usage in 3.1.x:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'channel.createMessage(msg -> {\r\n  msg.setContent("Hello @everyone");\r\n  msg.setAllowedMentions(AllowedMentions.suppressEveryone());\r\n  msg.addEmbed(embed -> {\r\n    embed.setTitle("Foo");\r\n    embed.addField("Bar", "Baz", false);\r\n    embed.setColor(Color.BLUE);\r\n  });\r\n})\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"createMessage"})," method takes a ",(0,r.jsx)(n.code,{children:"Consumer<MessageCreateSpec>"}),'. In other words, the spec is "given to you" by the\r\nmethod, and you mutate that spec to put it in the state you want. While it works well, this pattern was often confusing\r\nto users, most notably because you couldn\'t ever really "hold" a spec. It was a kind of ephemeral thing that could only\r\nbe given to you in these mutating Consumers.']}),"\n",(0,r.jsx)(n.p,{children:'In 3.2, we sought to "materialize" specs. Specs are now immutable data carriers that can be built in a few different\r\nways. The way you pick is purely up to your preference.'}),"\n",(0,r.jsx)(n.h4,{id:"builder",children:"Builder"}),"\n",(0,r.jsx)(n.p,{children:"The most obvious way to build an object in Java is the builder pattern. This works exactly how you think it would."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'channel.createMessage(MessageCreateSpec.builder()\r\n  .content("Hello @everyone")\r\n  .allowedMentions(AllowedMentions.suppressEveryone())\r\n  .addEmbed(EmbedCreateSpec.builder()\r\n    .title("Foo")\r\n    .addField("Bar", "Baz", false)\r\n    .color(Color.BLUE)\r\n    .build())\r\n  .build())\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Any spec, ",(0,r.jsx)(n.code,{children:"SomeSpec"}),", has a static method ",(0,r.jsx)(n.code,{children:"SomeSpec.builder()"})," which will return a ",(0,r.jsx)(n.code,{children:"SomeSpec.Builder"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"withers",children:"Withers"}),"\n",(0,r.jsxs)(n.p,{children:['In addition to a builder, all specs come equipped with "wither" (or ',(0,r.jsx)(n.code,{children:"withX"}),") methods that return a copy of the current\r\nspec with a modified field. The above example could be equivalently written as..."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'channel.createMessage(MessageCreateSpec.create()\r\n  .withContent("Hello @everyone")\r\n  .withAllowedMentions(AllowedMentions.suppressEveryone())\r\n  .withEmbeds(EmbedCreateSpec.create()\r\n    .withTitle("Foo")\r\n    .withFields(EmbedCreateFields.Field.of("Bar", "Baz", false))\r\n    .withColor(Color.BLUE)))\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Similar to ",(0,r.jsx)(n.code,{children:"builder()"}),", specs also have a static ",(0,r.jsx)(n.code,{children:"create()"})," method that returns a minimal, default spec which can be\r\nmodified using the wither methods."]}),"\n",(0,r.jsx)(n.h4,{id:"fluent-publishers",children:"Fluent Publishers"}),"\n",(0,r.jsxs)(n.p,{children:["Finally, most methods that accept specs also have a parameter-less (or minimal parameters) overload that instead returns\r\na special ",(0,r.jsx)(n.code,{children:"Mono"})," or ",(0,r.jsx)(n.code,{children:"Flux"}),". These publishers have methods corresponding to each property of the spec. This allows for\r\nfluent calls to these methods."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'channel.createMessage("Hello @everyone")\r\n  .withAllowedMentions(AllowedMentions.suppressEveryone())\r\n  .withEmbeds(EmbedCreateSpec.create()\r\n    .withTitle("Foo")\r\n    .withFields(EmbedCreateFields.Field.of("Bar", "Baz", false))\r\n    .withColor(Color.BLUE)))\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For a supported spec, ",(0,r.jsx)(n.code,{children:"SomeActionSpec"}),", there will be a corresponding publisher ",(0,r.jsx)(n.code,{children:"SomeAction(Mono/Flux)"}),". Note that this\r\nisn't supported for all specs. As you can see above, the parameter to ",(0,r.jsx)(n.code,{children:"withEmbeds"})," isn't included in the surrounding\r\nfluent chain (and we could have chosen to use a builder there if we wanted)."]}),"\n",(0,r.jsx)(n.h4,{id:"legacy-specs",children:"Legacy Specs"}),"\n",(0,r.jsxs)(n.p,{children:['To aide migration, we will continue to support the previous spec behavior in 3.2. The old ("legacy") specs have been\r\nmoved to ',(0,r.jsx)(n.code,{children:"discord4j.core.spec.legacy"}),", and had ",(0,r.jsx)(n.code,{children:"Legacy"})," prepended to their names. For example, 3.1's\r\n",(0,r.jsx)(n.code,{children:"discord4j.core.spec.MessageCreateSpec"})," is now ",(0,r.jsx)(n.code,{children:"discord4j.core.spec.legacy.LegacyMessageCreateSpec"})," in 3.2."]}),"\n",(0,r.jsxs)(n.p,{children:["This means that any code using specs like ",(0,r.jsx)(n.code,{children:"foo(spec -> ...)"})," will continue to work without issues, but if you directly\r\nimported a spec class, you will need to update the package, as it was moved to ",(0,r.jsx)(n.code,{children:"discord4j.core.spec.legacy"})," package and\r\nall ",(0,r.jsx)(n.code,{children:"XxSpec"})," classes were deprecated and renamed to ",(0,r.jsx)(n.code,{children:"LegacyXxSpec"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["These legacy specs are deprecated. They exist only to make migration a bit easier, and they ",(0,r.jsx)(n.em,{children:"will"})," be removed in a\r\nfuture version. Please let us know if the current alternatives are not a good fit for your use case."]})}),"\n",(0,r.jsx)(n.h3,{id:"interactions",children:"Interactions"}),"\n",(0,r.jsxs)(n.p,{children:["This feature is under development from Discord therefore we have marked it as ",(0,r.jsx)(n.strong,{children:"Experimental"}),", meaning breaking changes can happen between minor versions (in D4J that is from x.y.z to x.y.z+1). A new hierarchy was introduced after the inclusion of context menus in ",(0,r.jsx)(n.a,{href:"https://github.com/Discord4J/Discord4J/pull/1001",children:"#1001"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Event","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["InteractionCreateEvent","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["ApplicationCommandInteractionEvent","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ChatInputInteractionEvent"}),"\n",(0,r.jsx)(n.li,{children:"MessageInteractionEvent"}),"\n",(0,r.jsx)(n.li,{children:"UserInteractionEvent"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["ComponentInteractionEvent","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ButtonInteractionEvent"}),"\n",(0,r.jsx)(n.li,{children:"SelectMenuInteractionEvent"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"renamed-interaction-types",children:"Renamed interaction types"}),"\n",(0,r.jsx)(n.p,{children:"The following versions are affected and need to migrate to these types when upgrading:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"v3.1.7"}),"\n",(0,r.jsx)(n.li,{children:"v3.2.0-RC3"}),"\n"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Previous"}),(0,r.jsx)(n.th,{children:"New"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SlashCommandEvent"}),(0,r.jsx)(n.td,{children:"ChatInputInteractionEvent"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ComponentInteractEvent"}),(0,r.jsx)(n.td,{children:"ComponentInteractionEvent"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ButtonInteractEvent"}),(0,r.jsx)(n.td,{children:"ButtonInteractionEvent"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SelectMenuInteractEvent"}),(0,r.jsx)(n.td,{children:"SelectMenuInteractionEvent"})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"webhook-execution",children:"Webhook execution"}),"\n",(0,r.jsxs)(n.p,{children:["Interactions use the webhook execution feature under the hood that was backported from v3.2 to v3.1. In particular, if\r\nyou used ",(0,r.jsx)(n.code,{children:"WebhookMultipartRequest"})," for your slash command application in v3.1 you now have to migrate to\r\n",(0,r.jsx)(n.code,{children:"MultipartRequest<WebhookExecuteRequest>"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"WebhookMultipartRequest request = new WebhookMultipartRequest(body);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Becomes one of these, depending on whether you include attachments to it or not:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"MultipartRequest<WebhookExecuteRequest> request = MultipartRequest.ofRequest(body);\r\nMultipartRequest<WebhookExecuteRequest> request = MultipartRequest.ofRequestAndFiles(body, files);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["However, starting from v3.2.0, it's less likely you need to directly call ",(0,r.jsx)(n.code,{children:"MultipartRequest"})," for interactions, as there\r\nare ",(0,r.jsx)(n.code,{children:"discord4j-core"})," methods available now, including the richer and fluent new request spec API:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'List<Tuple2<String, InputStream>> file = Collections.singletonList(Tuples.of("myAttachment.zip", inputStream));\r\nMono<?> edit = press.getInteractionResponse()\r\n        .editInitialResponse(MultipartRequest.ofRequestAndFiles(\r\n                WebhookMessageEditRequest.builder()\r\n                        .contentOrNull("Wow, a new attachment!")\r\n                        .components(Collections.singletonList(row.getData()))\r\n                        .build(), file));\r\nreturn press.acknowledge().then(edit);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Can now be migrated to new methods without relying on ",(0,r.jsx)(n.code,{children:"getInteractionResponse()"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'MessageCreateFields.File file = MessageCreateFields.File.of("myAttachment.zip", inputStream);\r\nMono<?> edit = press.editReply()\r\n        .withContentOrNull("Wow, a new attachment!")\r\n        .withFiles(file)\r\n        .withComponents(row);\r\nreturn press.deferEdit().then(edit);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This also applies to ",(0,r.jsx)(n.code,{children:"event.getInteractionResponse().createFollowupResponse(...)"})," that is now available at\r\n",(0,r.jsx)(n.code,{children:"event.createFollowup()"})," using the new APIs. For a summary of methods available under this new API,\r\nsee ",(0,r.jsx)(n.a,{href:"/interactions#method-summary",children:"this section"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["To see the changes in action, check our ",(0,r.jsx)(n.a,{href:"/examples",children:"Examples"})," page."]}),"\n",(0,r.jsx)(n.h4,{id:"ephemeral-variants",children:"Ephemeral variants"}),"\n",(0,r.jsx)(n.p,{children:"For example, to reply ephemerally to a command, the below code can now be used:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// event is a ChatInputInteractionEvent\r\nevent.reply("Content!")\r\n    .withEphemeral(true)\r\n    .subscribe();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This is now recommended over calling ",(0,r.jsx)(n.code,{children:"*Ephemeral"})," methods."]}),"\n",(0,r.jsxs)(n.p,{children:["For more information regarding how to respond to slash commands with the new method, see ",(0,r.jsx)(n.a,{href:"/interactions/application-commands#responding-to-commands",children:"Application Commands - Responding"})]}),"\n",(0,r.jsx)(n.h2,{id:"advanced-features",children:"Advanced features"}),"\n",(0,r.jsx)(n.h3,{id:"directly-querying-a-store",children:"Directly querying a store"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended way is using ",(0,r.jsx)(n.code,{children:"EntityRetrievalStrategy.STORE"})," for methods that support it. However if it's not available for your use case and used ",(0,r.jsx)(n.code,{children:"StateView"})," before, you now have to migrate to querying a ",(0,r.jsx)(n.code,{children:"Store"})," directly, available from ",(0,r.jsx)(n.code,{children:"GatewayResources"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This abstraction is now focused on query objects, named ",(0,r.jsx)(n.code,{children:"ReadActions"}),". A quick example to get the cached user count:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// client is a GatewayDiscordClient instance\r\nStore store = client.getGatewayResources().getStore();\r\nlong userCount = Mono.from(store.execute(ReadActions.countUsers())).block();\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"customizing-a-storelayout",children:["Customizing a ",(0,r.jsx)(n.code,{children:"StoreLayout"})]}),"\n",(0,r.jsxs)(n.p,{children:["The entity cache from v3.1 set a structure that's too rigid for some implementations, so a new interface ",(0,r.jsx)(n.code,{children:"StoreLayout"})," was created to abstract the read/write process that bots needs to handle when connecting to the Discord Gateway to maintain a cache. v3.2 now defaults to ",(0,r.jsx)(n.code,{children:"Store.fromLayout(LocalStoreLayout.create())"})," as the new in-memory entity cache."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"LocalStoreLayout"})," configures a set of defaults as well through ",(0,r.jsx)(n.code,{children:"StorageConfig"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Since messages have a larger storage footprint, a ",(0,r.jsx)(n.a,{href:"https://github.com/ben-manes/caffeine",children:"Caffeine"})," cache ",(0,r.jsx)(n.code,{children:"StorageBackend"})," is set to 1000 of the most recent messages"]}),"\n",(0,r.jsx)(n.li,{children:"Set to remove all content under stale cache conditions like a non-resumable reconnect or logout"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["These options can be configured through a builder using: ",(0,r.jsx)(n.code,{children:"LocalStoreLayout.create(StorageConfig.builder().build())"})]}),"\n",(0,r.jsxs)(n.p,{children:["For an example implementation beyond what's built-in, check this project from Discord4J contributor @napstr: ",(0,r.jsx)(n.a,{href:"https://github.com/CapybaraLabs/d4j-postgres-store",children:"https://github.com/CapybaraLabs/d4j-postgres-store"})]}),"\n",(0,r.jsx)(n.h3,{id:"other-features",children:"Other features"}),"\n",(0,r.jsxs)(n.p,{children:["Check more details about the API and behavior changes in ",(0,r.jsx)(n.a,{href:"/whats-new-in-v3-2",children:"What's new in v3.2"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);