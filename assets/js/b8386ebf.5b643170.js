"use strict";(self.webpackChunkdiscord4j_documentation=self.webpackChunkdiscord4j_documentation||[]).push([[951],{8858:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var i=t(4848),r=t(8453);const s={id:"migrating-from-v3-0-to-v3-1",title:"Migrating from v3.0 to v3.1",sidebar_label:"Migrating from v3.0 to v3.1",slug:"/migrating-from-v3-0-to-v3-1"},o=void 0,a={id:"Migration Guides/migrating-from-v3-0-to-v3-1",title:"Migrating from v3.0 to v3.1",description:"Before you start",source:"@site/docs/07-Migration Guides/migrating-from-v3-0-to-v3-1.mdx",sourceDirName:"07-Migration Guides",slug:"/migrating-from-v3-0-to-v3-1",permalink:"/migrating-from-v3-0-to-v3-1",draft:!1,unlisted:!1,editUrl:"https://github.com/Discord4J/documentation/edit/master/docs/07-Migration Guides/migrating-from-v3-0-to-v3-1.mdx",tags:[],version:"current",lastUpdatedAt:1714856549e3,frontMatter:{id:"migrating-from-v3-0-to-v3-1",title:"Migrating from v3.0 to v3.1",sidebar_label:"Migrating from v3.0 to v3.1",slug:"/migrating-from-v3-0-to-v3-1"},sidebar:"mySidebar",previous:{title:"Migrating from v2.x to v3.1",permalink:"/migrating-from-v2-x-to-v3-1"},next:{title:"Migrating from v3.1 to v3.2",permalink:"/migrating-from-v3-1-to-v3-2"}},c={},d=[{value:"Before you start",id:"before-you-start",level:2},{value:"Updating dependencies",id:"updating-dependencies",level:2},{value:"Gradle",id:"gradle",level:3},{value:"Maven",id:"maven",level:3},{value:"Connecting to the Gateway",id:"connecting-to-the-gateway",level:2},{value:"Adding event listeners",id:"adding-event-listeners",level:2},{value:"Customizing Gateway features",id:"customizing-gateway-features",level:2},{value:"Migrating from <code>setShardCount(n)</code> or <code>setShardIndex(i)</code>",id:"migrating-from-setshardcountn-or-setshardindexi",level:3},{value:"Migrating from <code>setInitialPresence</code>",id:"migrating-from-setinitialpresence",level:3},{value:"Migrating from <code>setIdentifyOptions</code>",id:"migrating-from-setidentifyoptions",level:3},{value:"Migrating from <code>setStoreService(service)</code>",id:"migrating-from-setstoreserviceservice",level:3},{value:"Migrating from <code>setEventProcessor</code> and <code>setEventScheduler</code>",id:"migrating-from-seteventprocessor-and-seteventscheduler",level:3},{value:"Migrating from <code>setGatewayClientFactory</code>",id:"migrating-from-setgatewayclientfactory",level:3},{value:"Migrating from <code>setRetryOptions</code>",id:"migrating-from-setretryoptions",level:3},{value:"Migrating from <code>setGatewayObserver</code>",id:"migrating-from-setgatewayobserver",level:3},{value:"Migrating from <code>setIdentifyLimiter</code>",id:"migrating-from-setidentifylimiter",level:3},{value:"Migrating from <code>setVoiceConnectionScheduler</code>",id:"migrating-from-setvoiceconnectionscheduler",level:3},{value:"Gateway options",id:"gateway-options",level:3},{value:"Customizing REST features",id:"customizing-rest-features",level:2},{value:"Requesting Discord entities",id:"requesting-discord-entities",level:2},{value:"Creating REST entities",id:"creating-rest-entities",level:4},{value:"Fetching entities",id:"fetching-entities",level:3},{value:"Logging",id:"logging",level:2},{value:"Advanced features",id:"advanced-features",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"before-you-start",children:"Before you start"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["If you encounter an issue while following this guide or discover something missing, feel free to suggest changes or discuss them in our ",(0,i.jsx)(n.a,{href:"https://discord.gg/d4j",children:"server"}),". Thanks!"]})}),"\n",(0,i.jsxs)(n.p,{children:["This document is meant to help you migrate your application to Discord4J v3.1 if you're already on v3.0. If not, please check our ",(0,i.jsx)(n.a,{href:"/migrating-from-v2-x-to-v3-1",children:"guild"})," first."]}),"\n",(0,i.jsx)(n.p,{children:"Discord4J is transitioning to a new architecture where users are able to work with the library REST capabilities separately from real-time Gateway operations in an easier way than before."}),"\n",(0,i.jsxs)(n.p,{children:["In addition, spawning Gateway connections is treated separately from ",(0,i.jsx)(n.code,{children:"DiscordClient"}),", allowing users to have all joining shards publish events and entities to a single location, removing the need of using separate classes for handling multiple shards in a single process."]}),"\n",(0,i.jsxs)(n.p,{children:["While this means that a single ",(0,i.jsx)(n.code,{children:"EventDispatcher"})," and ",(0,i.jsx)(n.code,{children:"StateHolder"})," are shared across all shards controlled by a single ",(0,i.jsx)(n.code,{children:"GatewayDiscordClient"}),", you are in control of what shards are connected to it (",(0,i.jsx)(n.code,{children:"DiscordClient"})," + Gateway capabilities = ",(0,i.jsx)(n.code,{children:"GatewayDiscordClient"}),"). This enables you to more easily setup distributed architectures where certain actions are coordinated even across multiple JVMs."]}),"\n",(0,i.jsxs)(n.p,{children:["For a more in-depth explanation of the new features and changes introduced check ",(0,i.jsx)(n.a,{href:"/whats-new-in-v3-1",children:"What's new in v3.1"})," and ",(0,i.jsx)(n.a,{href:"/glossary",children:"glossary"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"updating-dependencies",children:"Updating dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["Discord4J v3.1 depends on Reactor Dysprosium release train (",(0,i.jsx)(n.a,{href:"https://github.com/reactor/reactor-core",children:"Reactor Core"})," 3.3.x and ",(0,i.jsx)(n.a,{href:"https://github.com/reactor/reactor-netty",children:"Reactor Netty"})," 0.9.x)."]}),"\n",(0,i.jsxs)(n.p,{children:["One important change in Reactor is the addition of the ",(0,i.jsx)(n.code,{children:"Schedulers.boundedElastic()"})," scheduler that caps the number of threads. It should help for cases when you do blocking operations whilst keeping a limit on the amount of threads created."]}),"\n",(0,i.jsx)(n.h3,{id:"gradle",children:"Gradle"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"repositories {\r\n  mavenCentral()\r\n}\r\n\r\ndependencies {\r\n  implementation 'com.discord4j:discord4j-core:3.1.0'\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"maven",children:"Maven"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<dependencies>\r\n    <dependency>\r\n        <groupId>com.discord4j</groupId>\r\n        <artifactId>discord4j-core</artifactId>\r\n        <version>3.1.0</version>\r\n    </dependency>\r\n</dependencies>\n"})}),"\n",(0,i.jsx)(n.h1,{id:"quick-migration",children:"Quick migration"}),"\n",(0,i.jsxs)(n.p,{children:["Most notable change from v3.0 to v3.1 is the behavior of the ",(0,i.jsx)(n.code,{children:"login()"})," method. We feel that the method makes most sense if it returns a ",(0,i.jsx)(n.code,{children:"Mono"})," that completes as login is completed, instead of logout, and to return a handle for the underlying gateway connections."]}),"\n",(0,i.jsxs)(n.p,{children:["This change is needed to allow separation between a ",(0,i.jsx)(n.code,{children:"DiscordClient"})," and the real-time Gateway, represented by a ",(0,i.jsx)(n.code,{children:"GatewayDiscordClient"}),". To acquire one and perform actions with a bot, you need to login to the Gateway first."]}),"\n",(0,i.jsxs)(n.p,{children:["Following is the quickstart example from v3.0 migrated to v3.1 as a starting point. Just move the code you had before ",(0,i.jsx)(n.code,{children:"login()"})," into the ",(0,i.jsx)(n.code,{children:".withGateway(client -> ...)"})," block and add ",(0,i.jsx)(n.code,{children:"return client.onDisconnect()"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'DiscordClientBuilder.create(System.getenv("token"))\r\n    .build()\r\n    .withGateway(client -> {\r\n        client.getEventDispatcher().on(ReadyEvent.class)\r\n                .subscribe(ready -> \r\n                    System.out.println("Logged in as " + ready.getSelf().getUsername())\r\n                );\r\n\r\n        client.getEventDispatcher().on(MessageCreateEvent.class)\r\n                .map(MessageCreateEvent::getMessage)\r\n                .filter(msg -> msg.getContent().equals("!ping"))\r\n                .flatMap(Message::getChannel)\r\n                .flatMap(channel -> channel.createMessage("Pong!"))\r\n                .subscribe();\r\n\r\n        return client.onDisconnect();\r\n    })\r\n    .block();\n'})}),"\n",(0,i.jsxs)(n.p,{children:["As you could have noticed, another important change is the return type of the ",(0,i.jsx)(n.code,{children:"Message::getContent()"})," method. Starting from v3.1 this method will return ",(0,i.jsx)(n.code,{children:"String"})," instead of ",(0,i.jsx)(n.code,{children:"Optional<String>"}),". This means that to directly migrate you now have to wrap ",(0,i.jsx)(n.code,{children:"message.getContent()"})," like this: ",(0,i.jsx)(n.code,{children:"Optional.of(message.getContent())"})]}),"\n",(0,i.jsxs)(n.p,{children:["If the IDE warns you when calling ",(0,i.jsx)(n.code,{children:"subscribe"}),", it's because the sequences could be wired together instead of calling ",(0,i.jsx)(n.code,{children:".subscribe()"})," within a reactive pipeline. To remove them you can transform the code into:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'DiscordClientBuilder.create(System.getenv("token"))\r\n        .build()\r\n        .withGateway(client -> {\r\n            Mono<Void> onReady = client.getEventDispatcher().on(ReadyEvent.class)\r\n                    .doOnNext(ready ->\r\n                        System.out.println(\r\n                            "Logged in as " + ready.getSelf().getUsername()\r\n                        )\r\n                    ).then();\r\n\r\n            Mono<Void> ping = client.getEventDispatcher().on(MessageCreateEvent.class)\r\n                    .map(MessageCreateEvent::getMessage)\r\n                    .filter(msg -> msg.getContent().equals("!ping"))\r\n                    .flatMap(Message::getChannel)\r\n                    .flatMap(channel -> channel.createMessage("Pong!"))\r\n                    .then();\r\n\r\n            return Mono.when(onReady, ping);\r\n        })\r\n        .block();\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Converting each event listener into a ",(0,i.jsx)(n.code,{children:"Mono<Void>"})," allows us to wire both together and avoid calling ",(0,i.jsx)(n.code,{children:"client.onDisconnect()"}),"."]}),"\n",(0,i.jsx)(n.h1,{id:"discord4j-features",children:"Discord4J features"}),"\n",(0,i.jsx)(n.h2,{id:"connecting-to-the-gateway",children:"Connecting to the Gateway"}),"\n",(0,i.jsxs)(n.p,{children:["We added convenience methods to ",(0,i.jsx)(n.code,{children:"DiscordClient"}),", namely static ",(0,i.jsx)(n.code,{children:"DiscordClient.builder(token)"})," and ",(0,i.jsx)(n.code,{children:"DiscordClient.create(token)"})," to quickly get started."]}),"\n",(0,i.jsx)(n.p,{children:"To connect using the default options:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'DiscordClient client = DiscordClient.create(System.getenv("token")); // (1)\r\nGatewayDiscordClient gateway = client.login().block(); // (2)\r\n\r\ngateway.on(ReadyEvent.class) // (3)\r\n        .subscribe(ready ->\r\n            System.out.println("Logged in as " + ready.getSelf().getUsername())\r\n        );\r\n\r\ngateway.onDisconnect().block(); // (4)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["(1) Shortcut to ",(0,i.jsx)(n.code,{children:"new DiscordClientBuilder(token).build()"})]}),"\n",(0,i.jsx)(n.li,{children:"(2) Acquire a synchronous handle on gateway connections, can be used to register events, get cached entities, etc."}),"\n",(0,i.jsxs)(n.li,{children:["(3) Shortcut to ",(0,i.jsx)(n.code,{children:"gateway.getEventDispatcher().on(ReadyEvent.class)"})]}),"\n",(0,i.jsxs)(n.li,{children:["(4) To keep the ",(0,i.jsx)(n.code,{children:"main"})," thread alive, await until bot disconnects through ",(0,i.jsx)(n.code,{children:"logout()"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You can also connect using a traditional ",(0,i.jsx)(n.code,{children:"flatMap"})," style, but if you're going this route we recommend the new ",(0,i.jsx)(n.code,{children:"withGateway"})," API:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'DiscordClient client = DiscordClient.create(System.getenv("token"));\r\nclient.withGateway(gateway -> {\r\n    Flux<ReadyEvent> hello = gateway.on(ReadyEvent.class)\r\n            .doOnNext(ready ->\r\n                System.out.println("Logged in as " + ready.getSelf().getUsername())\r\n            );\r\n\r\n    Flux<MessageCreateEvent> messages = gateway.on(MessageCreateEvent.class)\r\n            .doOnNext(event ->\r\n                System.out.println("> " + event.getMessage().getContent())\r\n            );\r\n\r\n    return Mono.when(hello, messages); // (1)\r\n}).block(); // (2)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["(1) Can use ",(0,i.jsx)(n.code,{children:"Mono.when"})," to await for the completion of multiple sequences"]}),"\n",(0,i.jsx)(n.li,{children:"(2) Blocking here establishes the connections and waits until the bot logs out."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"adding-event-listeners",children:"Adding event listeners"}),"\n",(0,i.jsxs)(n.p,{children:["Access to the ",(0,i.jsx)(n.code,{children:"EventDispatcher"})," is through ",(0,i.jsx)(n.code,{children:"GatewayDiscordClient"}),". Calling ",(0,i.jsx)(n.code,{children:"#getEventDispatcher()"})," is optional as shortcut ",(0,i.jsx)(n.code,{children:".on(...)"})," methods have been added to it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Alternative 1\r\ngateway.on(MessageCreateEvent.class)\r\n        .map(MessageCreateEvent::getMessage)\r\n        .filter(msg -> Optional.of(msg.getContent()).map("!ping"::equals).orElse(false))\r\n        .flatMap(Message::getChannel)\r\n        .flatMap(channel -> channel.createMessage("Pong!")\r\n                .onErrorResume(t -> Mono.empty())) // (1)\r\n        .subscribe();\r\n\r\n// Alternative 2\r\ngateway.on(MessageCreateEvent.class,\r\n        event -> Mono.just(event.getMessage())\r\n                .filter(message -> \r\n                    Optional.of(message.getContent())\r\n                        .map("!ping"::equals)\r\n                        .orElse(false))\r\n                .flatMap(Message::getChannel)\r\n                .flatMap(channel -> channel.createMessage("Pong!")))\r\n        .subscribe(); // (2)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(1) Needs error handling code along the chain"}),"\n",(0,i.jsxs)(n.li,{children:["(2) Error handling provided for you within the ",(0,i.jsx)(n.code,{children:"event -> { ... }"})," block"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"customizing-gateway-features",children:"Customizing Gateway features"}),"\n",(0,i.jsxs)(n.p,{children:["Discord4J v3.1 introduces a new architecture where a ",(0,i.jsx)(n.code,{children:"GatewayBootstrap"})," creates a ",(0,i.jsx)(n.strong,{children:"shard group"})," that will share events and caches."]}),"\n",(0,i.jsxs)(n.p,{children:["Most of the options you would previously set at the ",(0,i.jsx)(n.code,{children:"DiscordClientBuilder"})," or ",(0,i.jsx)(n.code,{children:"ShardingClientBuilder"})," level in v3.0, are now located at ",(0,i.jsx)(n.code,{children:"GatewayBootstrap"}),". This is a builder to establish gateway connections from a ",(0,i.jsx)(n.code,{children:"DiscordClient"})," by calling ",(0,i.jsx)(n.code,{children:"gateway()"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"migrating-from-setshardcountn-or-setshardindexi",children:["Migrating from ",(0,i.jsx)(n.code,{children:"setShardCount(n)"})," or ",(0,i.jsx)(n.code,{children:"setShardIndex(i)"})]}),"\n",(0,i.jsxs)(n.p,{children:["Get a builder with ",(0,i.jsx)(n.code,{children:"client.gateway()"})," and then call ",(0,i.jsx)(n.code,{children:"setSharding(ShardingStrategy)"}),". Creating a ",(0,i.jsx)(n.code,{children:"ShardingStrategy"})," can be done using the following factories:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ShardingStrategy.recommended()"})," will provide the recommended amount of shards and include all of them in the group"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ShardingStrategy.fixed(n)"})," will use the given ",(0,i.jsx)(n.code,{children:"shardCount"})," and include all shards ",(0,i.jsx)(n.code,{children:"0..N"})," in the group"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ShardingStrategy.single()"})," will use a simple ",(0,i.jsx)(n.code,{children:"[0,1]"})," configuration, for small bots and ",(0,i.jsx)(n.a,{href:"https://github.com/Discord4J/connect",children:"distributed bot architectures"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You can also customize the strategy using ",(0,i.jsx)(n.code,{children:"ShardingStrategy.builder()"})," allowing you to configure:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Total count of shards parameter through ",(0,i.jsx)(n.code,{children:"count"})]}),"\n",(0,i.jsxs)(n.li,{children:["Shards identified to the Gateway using ",(0,i.jsx)(n.code,{children:"indices"})]}),"\n",(0,i.jsxs)(n.li,{children:["Can be also combined with ",(0,i.jsx)(n.code,{children:"filter"})," to connect a subset of shards"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"migrating-from-setinitialpresence",children:["Migrating from ",(0,i.jsx)(n.code,{children:"setInitialPresence"})]}),"\n",(0,i.jsxs)(n.p,{children:["Similar to above, call ",(0,i.jsx)(n.code,{children:"setInitialStatus"})," which now takes a ",(0,i.jsx)(n.code,{children:"Function<ShardInfo, StatusUpdate>"}),". If you used ",(0,i.jsx)(n.code,{children:"setInitialPresence(Presence.invisible())"})," you should now use ",(0,i.jsx)(n.code,{children:"setInitialStatus(shard -> Presence.invisible())"})]}),"\n",(0,i.jsxs)(n.h3,{id:"migrating-from-setidentifyoptions",children:["Migrating from ",(0,i.jsx)(n.code,{children:"setIdentifyOptions"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"IdentifyOptions"})," cannot be set directly now and you'll have to use a mix of ",(0,i.jsx)(n.code,{children:"setSharding"})," and ",(0,i.jsx)(n.code,{children:"setResumeOptions"})," depending on your use case."]}),"\n",(0,i.jsxs)(n.h3,{id:"migrating-from-setstoreserviceservice",children:["Migrating from ",(0,i.jsx)(n.code,{children:"setStoreService(service)"})]}),"\n",(0,i.jsxs)(n.p,{children:["Get a builder with ",(0,i.jsx)(n.code,{children:"client.gateway()"})," and then call ",(0,i.jsx)(n.code,{children:"setStoreService(service)"}),". If you used ",(0,i.jsx)(n.code,{children:"ShardingClientBuilder"})," before, Discord4J can automatically prepare your ",(0,i.jsx)(n.code,{children:"StoreService"})," with shard invalidation capabilities."]}),"\n",(0,i.jsxs)(n.h3,{id:"migrating-from-seteventprocessor-and-seteventscheduler",children:["Migrating from ",(0,i.jsx)(n.code,{children:"setEventProcessor"})," and ",(0,i.jsx)(n.code,{children:"setEventScheduler"})]}),"\n",(0,i.jsxs)(n.p,{children:["A new interface ",(0,i.jsx)(n.code,{children:"EventDispatcher"})," is added to more easily customize both options. There are a few built-in factories:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EventDispatcher.buffering()"})," that stores all events ",(0,i.jsx)(n.strong,{children:"until the first subscription"}),", then events are published to all subscribers as they are received. This is identical to the one used in v3.0."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EventDispatcher.withEarliestEvents(int)"})," keeps only the earliest events and the rest are dropped ",(0,i.jsx)(n.strong,{children:"until the first subscription"}),", then events are published to all subscribers as they are received."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EventDispatcher.withLatestEvents(int)"})," keeps only the latest events ",(0,i.jsx)(n.strong,{children:"until the first subscription"}),", then events are published to all subscribers as they are received. Initial events like ",(0,i.jsx)(n.code,{children:"ReadyEvent"})," might be dropped."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EventDispatcher.replayingWithTimeout(Duration)"})," that buffers and replays all events up to ",(0,i.jsx)(n.code,{children:"Duration"})," maximum age."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EventDispatcher.replayingWithSize(int)"})," that buffers and replays the latest events."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To customize the above options, get a builder with ",(0,i.jsx)(n.code,{children:"client.gateway()"})," and then call ",(0,i.jsx)(n.code,{children:"setEventDispatcher(...)"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The current default is a ",(0,i.jsx)(n.code,{children:"ReplayingEventDispatcher"}),", created using ",(0,i.jsx)(n.code,{children:"ReplayingEventDispatcher.create()"}),". It can be customized through ",(0,i.jsx)(n.code,{children:"ReplayingEventDispatcher.builder()"})," and it works in the following way:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Buffers all events before a subscription exists, as long as they match a filter. By default, ",(0,i.jsx)(n.code,{children:"GatewayLifecycleEvent"})," and ",(0,i.jsx)(n.code,{children:"GuildCreateEvent"})," types. This can be customized through ",(0,i.jsx)(n.code,{children:"replayEventFilter"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Early subscribers get all previously buffered events, until a given timeout. By default, 5 seconds after the first subscriber arrives and can be changed in ",(0,i.jsx)(n.code,{children:"stopReplayingTrigger"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Late subscribers only get events as they are published, no replay capabilities until all subscribers are disposed."}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"migrating-from-setgatewayclientfactory",children:["Migrating from ",(0,i.jsx)(n.code,{children:"setGatewayClientFactory"})]}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"login(Function)"})," overload after calling ",(0,i.jsx)(n.code,{children:"client.gateway()"}),". Used to build distributed bot architectures."]}),"\n",(0,i.jsxs)(n.h3,{id:"migrating-from-setretryoptions",children:["Migrating from ",(0,i.jsx)(n.code,{children:"setRetryOptions"})]}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"setReconnectOptions"})," after calling ",(0,i.jsx)(n.code,{children:"client.gateway()"}),". By default, Discord4J will always attempt to reconnect using an exponential backoff with jitter strategy."]}),"\n",(0,i.jsxs)(n.h3,{id:"migrating-from-setgatewayobserver",children:["Migrating from ",(0,i.jsx)(n.code,{children:"setGatewayObserver"})]}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"setGatewayObserver"})," after calling ",(0,i.jsx)(n.code,{children:"client.gateway()"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"migrating-from-setidentifylimiter",children:["Migrating from ",(0,i.jsx)(n.code,{children:"setIdentifyLimiter"})]}),"\n",(0,i.jsxs)(n.p,{children:["Discord4J v3.1 introduced a new API called ",(0,i.jsx)(n.code,{children:"ShardCoordinator"})," which groups all options related to coordinating multiple shard identification. We supply ",(0,i.jsx)(n.code,{children:"LocalShardCoordinator"})," by default and can be replaced by one capable of working with a distributed bot architecture."]}),"\n",(0,i.jsxs)(n.h3,{id:"migrating-from-setvoiceconnectionscheduler",children:["Migrating from ",(0,i.jsx)(n.code,{children:"setVoiceConnectionScheduler"})]}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"setVoiceReactorResources"})," after calling ",(0,i.jsx)(n.code,{children:"client.gateway()"}),". It takes a ",(0,i.jsx)(n.code,{children:"ReactorResource"})," object that will replace the one set at the ",(0,i.jsx)(n.code,{children:"DiscordClientBuilder"})," level only for voice. A similar override exists for gateway in ",(0,i.jsx)(n.code,{children:"setGatewayReactorResources"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"gateway-options",children:"Gateway options"}),"\n",(0,i.jsxs)(n.p,{children:["Gateway options are set in ",(0,i.jsx)(n.code,{children:"GatewayBootstrap"}),". You can obtain one by calling ",(0,i.jsx)(n.code,{children:"gateway()"})," from ",(0,i.jsx)(n.code,{children:"DiscordClient"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"DiscordClient client = DiscordClient.create(token);\r\nGatewayDiscordClient gateway = client.gateway()\r\n        .setInitialStatus(shard -> Presence.online()) // (1)\r\n        .setSharding(ShardingStrategy.recommended()) // (2)\r\n        .setShardCoordinator(LocalShardCoordinator.create()) // (3)\r\n        .setAwaitConnections(true) // (4)\r\n        .setStoreService(new JdkStoreService()) // (5)\r\n        .setEventDispatcher(EventDispatcher.buffering()) // (6)\r\n        .login()\r\n        .block();\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(1) Set the initial presence depending on the shard."}),"\n",(0,i.jsx)(n.li,{children:"(2) Sharding policy used by this shard group builder."}),"\n",(0,i.jsx)(n.li,{children:"(3) Allows coordinating shard login across multiple instances."}),"\n",(0,i.jsxs)(n.li,{children:["(4) Configures how to obtain a ",(0,i.jsx)(n.code,{children:"GatewayDiscordClient"}),": if ",(0,i.jsx)(n.code,{children:"false"}),", once the connection process begins (at least 1 shard connects, this is the default) or if ",(0,i.jsx)(n.code,{children:"true"}),", await until all shards have connected."]}),"\n",(0,i.jsx)(n.li,{children:"(5) Configure the backing store."}),"\n",(0,i.jsx)(n.li,{children:"(6) Configure the event dispatcher model."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"customizing-rest-features",children:"Customizing REST features"}),"\n",(0,i.jsxs)(n.p,{children:["Core options for REST operations are set at ",(0,i.jsx)(n.code,{children:"DiscordClientBuilder"})," before building a ",(0,i.jsx)(n.code,{children:"DiscordClient"}),", similar to v3.0. These core resources can later by retrieved through ",(0,i.jsx)(n.code,{children:"DiscordClient::getCoreResources()"})," or ",(0,i.jsx)(n.code,{children:"GatewayDiscordClient::getCoreResources()"})," methods."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'JacksonResources jackson = new JacksonResources();\r\nDiscordClient.builder(System.getenv("token")) // (1)\r\n    .setJacksonResources(jackson) // (2)\r\n    .setGlobalRateLimiter(BucketGlobalRateLimiter.create()) // (3)\r\n    .setExchangeStrategies(ExchangeStrategies.jackson(jackson)) // (4)\r\n    .setReactorResources(ReactorResources.create()) // (5)\r\n    .onClientResponse(ResponseFunction.emptyIfNotFound()) // (6)\r\n    .build()\r\n    .gateway()\r\n    .login()\r\n    .onDisconnect()\r\n    .block();\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(1) Make sure you begin with obtaining a builder."}),"\n",(0,i.jsx)(n.li,{children:"(2) Can customize how the Jackson object mapper works."}),"\n",(0,i.jsx)(n.li,{children:"(3) Can customize how the global rate limiter works."}),"\n",(0,i.jsx)(n.li,{children:"(4) Can customize how are REST requests written and REST responses read."}),"\n",(0,i.jsx)(n.li,{children:"(5) Can customize the underlying HttpClient used and the threading model"}),"\n",(0,i.jsx)(n.li,{children:"(6) Can customize how the REST client handles response codes under given scenarios."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"requesting-discord-entities",children:"Requesting Discord entities"}),"\n",(0,i.jsxs)(n.p,{children:["Starting from v3.1, Discord4J allows you to access ",(0,i.jsx)(n.strong,{children:"REST entities"}),", which identifies a given Discord entity in terms of their key parameters, without querying the REST API until you require access to the data they represent. This is expressed across two kinds of classes:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"RestEntity"})," classes provide a way to query the REST API for a specific entity. They are located in the ",(0,i.jsx)(n.code,{children:"discord4j.rest.entity"})," package."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EntityData"})," classes represent a JSON response encapsulated in an immutable object. They are located in the ",(0,i.jsx)(n.code,{children:"discord4j.discordjson.json"})," package."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"creating-rest-entities",children:"Creating REST entities"}),"\n",(0,i.jsx)(n.p,{children:"Here are the multiple locations you can get a REST entity from:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Replace "Entity" in the following examples with the one you\'re looking for: Channel, Emoji, Guild, Invite, Member, Message, Role, User, Webhook.'}),"\n",(0,i.jsxs)(n.li,{children:["Any of the ",(0,i.jsx)(n.code,{children:"getEntityById()"})," methods in ",(0,i.jsx)(n.code,{children:"DiscordClient"})," or ",(0,i.jsx)(n.code,{children:"GatewayDiscordClient::rest()"})," and you'll get a ",(0,i.jsx)(n.code,{children:"RestEntity"})," class"]}),"\n",(0,i.jsxs)(n.li,{children:["Create them directly by ID: ",(0,i.jsx)(n.code,{children:"RestEntity.create(123456789012345L)"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The classes available are: ",(0,i.jsx)(n.code,{children:"RestChannel"}),", ",(0,i.jsx)(n.code,{children:"RestEmoji"}),", ",(0,i.jsx)(n.code,{children:"RestGuild"}),", ",(0,i.jsx)(n.code,{children:"RestInvite"}),", ",(0,i.jsx)(n.code,{children:"RestMember"}),", ",(0,i.jsx)(n.code,{children:"RestMessage"}),", ",(0,i.jsx)(n.code,{children:"RestRole"}),", ",(0,i.jsx)(n.code,{children:"RestUser"})," and ",(0,i.jsx)(n.code,{children:"RestWebhook"})]}),"\n",(0,i.jsxs)(n.p,{children:["To retrieve these objects you should call methods in ",(0,i.jsx)(n.code,{children:"DiscordClient"}),", obtained from calling ",(0,i.jsx)(n.code,{children:"getClient().rest()"})," from most library objects, like ",(0,i.jsx)(n.code,{children:"Event"})," and ",(0,i.jsx)(n.code,{children:"Entity"})," instances."]}),"\n",(0,i.jsxs)(n.p,{children:["Once you acquire one of these objects, you can perform API methods without querying the contents. Alternative, you can perform an API request to get its content through ",(0,i.jsx)(n.code,{children:"getData()"})," and will return a ",(0,i.jsx)(n.code,{children:"Mono<EntityData>"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"fetching-entities",children:"Fetching entities"}),"\n",(0,i.jsxs)(n.p,{children:["To obtain cached entities you can use the same methods as in v3.0: ",(0,i.jsx)(n.code,{children:"getEntityById(Snowflake)"})," from within ",(0,i.jsx)(n.code,{children:"GatewayDiscordClient"}),". These methods will fallback to a REST API request if they are not found in cache."]}),"\n",(0,i.jsxs)(n.p,{children:["Starting from v3.1 you can customize how these entities are fetched, using the ",(0,i.jsx)(n.strong,{children:"EntityRetrievalStrategy"}),". This is configured when bootstrapping a Gateway group:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"GatewayDiscordClient gateway = discordClient.gateway()\r\n        .setEntityRetrievalStrategy(EntityRetrievalStrategy.STORE) // (1)\r\n        .login()\r\n        .block();\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(1) Only retrieve entities from store by default"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The following strategies are available:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EntityRetrievalStrategy.STORE"})," to only fetch from the Store (cache) and therefore return empty if a request entity is missing."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EntityRetrievalStrategy.REST"})," to fetch from REST directly, without attempting to hit the Store."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EntityRetrievalStrategy.STORE_FALLBACK_REST"})," to use the default setting from v3.0, which is attempting to hit the Store and if it's missed, fall back to a REST API call."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"logging",children:"Logging"}),"\n",(0,i.jsxs)(n.p,{children:["Logger structure has changed for v3.1, adding contextual information regarding gateway ID, shard ID, request bucket and request ID. For more details about the available loggers in this version, check our ",(0,i.jsx)(n.a,{href:"/logging",children:"Logging"})," page."]}),"\n",(0,i.jsx)(n.h2,{id:"advanced-features",children:"Advanced features"}),"\n",(0,i.jsxs)(n.p,{children:["For more detailed list of changes and migration notes, please check ",(0,i.jsx)(n.a,{href:"/whats-new-in-v3-1",children:"What's new in v3.1"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);