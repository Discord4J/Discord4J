"use strict";(self.webpackChunkdiscord4j_documentation=self.webpackChunkdiscord4j_documentation||[]).push([[53],{9384:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var s=t(4848),a=t(8453);const l={id:"select-menus",title:"Select Menus",sidebar_label:"Select Menus",slug:"/interactions/select-menus"},o=void 0,i={id:"How-to Guides/Interactions/select-menus",title:"Select Menus",description:"This page is a continuation of the Interactions (Reference) which dives into what Interactions are.",source:"@site/docs/04-How-to Guides/Interactions/select-menus.mdx",sourceDirName:"04-How-to Guides/Interactions",slug:"/interactions/select-menus",permalink:"/interactions/select-menus",draft:!1,unlisted:!1,editUrl:"https://github.com/Discord4J/documentation/edit/master/docs/04-How-to Guides/Interactions/select-menus.mdx",tags:[],version:"current",lastUpdatedAt:1632501638e3,frontMatter:{id:"select-menus",title:"Select Menus",sidebar_label:"Select Menus",slug:"/interactions/select-menus"},sidebar:"mySidebar",previous:{title:"Buttons",permalink:"/interactions/buttons"},next:{title:"Embeds",permalink:"/embeds"}},r={},c=[{value:"Creating Select Menus",id:"creating-select-menus",level:2},{value:"Creating and sending select menus for a regular message",id:"creating-and-sending-select-menus-for-a-regular-message",level:3},{value:"Select menus in a component response",id:"select-menus-in-a-component-response",level:3},{value:"Setting how many values a user may pick",id:"setting-how-many-values-a-user-may-pick",level:3},{value:"Disabled select menus",id:"disabled-select-menus",level:3},{value:"Placeholder text",id:"placeholder-text",level:3},{value:"Default selected value",id:"default-selected-value",level:3},{value:"Adding descriptions to options",id:"adding-descriptions-to-options",level:3},{value:"Emoji options",id:"emoji-options",level:3},{value:"Using a Temporary Listener To Respond",id:"using-a-temporary-listener-to-respond",level:2},{value:"Further Reading",id:"further-reading",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This page is a continuation of the ",(0,s.jsx)(n.a,{href:"/interactions",children:"Interactions (Reference)"})," which dives into ",(0,s.jsx)(n.em,{children:"what"})," Interactions are."]})}),"\n",(0,s.jsx)(n.h2,{id:"creating-select-menus",children:"Creating Select Menus"}),"\n",(0,s.jsx)(n.p,{children:"Creating Select Menus is extremely easy with Discord4J. You can add select menus to any message the bot sends, including responses to application commands or other interactions!"}),"\n",(0,s.jsx)(n.h3,{id:"creating-and-sending-select-menus-for-a-regular-message",children:"Creating and sending select menus for a regular message"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Whatever channel you want the message in\r\nSnowflake channelId = Snowflake.of(0);\r\n\r\nSelectMenu select = SelectMenu.of("custom-id",\r\n    SelectMenu.Option.of("label", "value"),\r\n    SelectMenu.Option.of("label2", "value2"),\r\n    SelectMenu.Option.of("label3", "value2")\r\n);\r\n\r\nclient.getChannelById(channelId)\r\n    .ofType(GuildMessageChannel.class)\r\n    .flatMap(channel -> channel.createMessage(\r\n        MessageCreateSpec.builder()\r\n        .content("Select Something!")\r\n        // Select Menus must be in action rows\r\n        .addComponent(ActionRow.of(select))\r\n        .build()\r\n    )\r\n).subscribe();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"select-menus-in-a-component-response",children:"Select menus in a component response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'SelectMenu select = SelectMenu.of("custom-id",\r\n    SelectMenu.Option.of("label", "value"),\r\n    SelectMenu.Option.of("label2", "value2"),\r\n    SelectMenu.Option.of("label3", "value2")\r\n);\r\n\r\nclient.on(ChatInputInteractionEvent.class, event -> {\r\n    if (event.getCommandName().equals("ping")) {\r\n        return event.reply("Pong!")\r\n            .withComponents(ActionRow.of(select));\r\n    }\r\n}).subscribe();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"setting-how-many-values-a-user-may-pick",children:"Setting how many values a user may pick"}),"\n",(0,s.jsxs)(n.p,{children:["Sometimes you may want to have a select menu where a user can pick multiple values rather than just one.\r\nTo set a minimum amount of values a user must pick: ",(0,s.jsx)(n.code,{children:".withMinValues(AMOUNT)"}),"\r\nAnd to set a maximum amount of values a user can pick: ",(0,s.jsx)(n.code,{children:".withMaxValues(AMOUNT)"})]}),"\n",(0,s.jsx)(n.p,{children:"These methods can be used together to enable more complex select menu actions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'SelectMenu select = SelectMenu.of("custom-id",\r\n    SelectMenu.Option.ofDefault("default-label", "Default Value!"),\r\n    SelectMenu.Option.of("label", "value"),\r\n    SelectMenu.Option.of("label2", "value2")\r\n).withMaxValues(3).withMinValues(1);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"disabled-select-menus",children:"Disabled select menus"}),"\n",(0,s.jsx)(n.p,{children:"If you want to prevent a select menu from being used, you can easily set it to being disabled."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'SelectMenu select = SelectMenu.of("custom-id",\r\n    SelectMenu.Option.ofDefault("default-label", "Default Value!"),\r\n    SelectMenu.Option.of("label", "value"),\r\n    SelectMenu.Option.of("label2", "value2")\r\n).disabled();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"placeholder-text",children:"Placeholder text"}),"\n",(0,s.jsx)(n.p,{children:"Placeholder text can be used when you don't wish to have a default selected value. This text will appear when no value is selected and can easily be done like so:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'SelectMenu select = SelectMenu.of("custom-id",\r\n    SelectMenu.Option.of("label", "value"),\r\n    SelectMenu.Option.of("label2", "value2")\r\n).withPlaceholder("Please select an option <3");\n'})}),"\n",(0,s.jsx)(n.h3,{id:"default-selected-value",children:"Default selected value"}),"\n",(0,s.jsx)(n.p,{children:"You may want to have a default value selected for the user, luckily discord supports this and D4J implements this cleanly.\r\nAll you need to do is create an option as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'SelectMenu.Option.ofDefault("default-label", "Default Value!")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"adding-descriptions-to-options",children:"Adding descriptions to options"}),"\n",(0,s.jsx)(n.p,{children:"Helping users understand the options they are picking is important. Sometimes, the context is clear and a description is unneeded, but if there needs to be a description, this can easily be achieved."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'SelectMenu.Option option = SelectMenu.Option.of("Label", "value").withDescription("My Description");\n'})}),"\n",(0,s.jsx)(n.h3,{id:"emoji-options",children:"Emoji options"}),"\n",(0,s.jsx)(n.p,{children:"If you want an emoji displayed rather than a text label we would use the following code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Custom non-animated emote\r\nReactionEmoji customEmoji = ReactionEmoji.of(546687597246939136L, "d4j", false);\r\nSelectMenu.Option customEmoteOption = SelectMenu.Option.of("label", "value").withEmoji(customEmoji);\r\n\r\n// Unicode emote\r\nReactionEmoji unicodeEmoji = ReactionEmoji.unicode("\\u2764");\r\nSelectMenu.Option unicodeEmoteOption = SelectMenu.Option.of("label", "value").withEmoji(unicodeEmoji);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-a-temporary-listener-to-respond",children:"Using a Temporary Listener To Respond"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["If you would like to always respond to select menu interactions, you can easily do so by creating a custom listener just as we showed in\r\n",(0,s.jsx)(n.a,{href:"/interactions/application-commands#receiving-commands",children:"Application Commands - Receiving"}),", using the ",(0,s.jsx)(n.code,{children:"SelectMenuInteractionEvent"})," class."]})}),"\n",(0,s.jsx)(n.p,{children:"Like Application Commands, select menus are always valid, no matter how much time has passed since the message was created. Responding to a select menu days, or weeks after its creation may not always be feasible. To counteract this, we can create a temporary listener that automatically times out."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Whatever channel you want the message in\r\nSnowflake channelId = Snowflake.of(0);\r\n\r\nSelectMenu select = SelectMenu.of("custom-id",\r\n    SelectMenu.Option.of("label", "value"),\r\n    SelectMenu.Option.of("label2", "value2")\r\n).withPlaceholder("Please select an option <3");\r\n\r\nclient.getChannelById(channelId)\r\n    .ofType(GuildMessageChannel.class)\r\n    .flatMap(channel -> {\r\n        Mono<Message> createMessageMono = channel.createMessage(MessageCreateSpec.builder()\r\n            .addComponent(ActionRow.of(select))\r\n            .build());\r\n\r\n        Mono<Void> tempListener = client.on(SelectMenuInteractionEvent.class, event -> {\r\n            if (event.getCustomId().equals("custom-id")) {\r\n                //Get all selected values\r\n                String values = event.getValues().toString().replace("[", "").replace("]", "");\r\n                return event.reply("You selected these values: " + values).withEphemeral(true);\r\n            } else {\r\n                // Ignore it\r\n                return Mono.empty();\r\n            }\r\n        }).timeout(Duration.ofMinutes(30)) // Timeout after 30 minutes\r\n        // Handle TimeoutException that will be thrown when the above times out\r\n        .onErrorResume(TimeoutException.class, ignore -> Mono.empty())\r\n        .then(); //Transform the flux to a mono\r\n\r\n        //Return both of the monos together\r\n        return createMessageMono.then(tempListener);\r\n    }).subscribe();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/examples",children:"Reference - Examples"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://discord.com/developers/docs/interactions/message-components#select-menus",children:"Discord Docs - Select Menus"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(6540);const a={},l=s.createContext(a);function o(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);